# coding: utf-8

"""
    hawkBit REST APIs

    Eclipse hawkBit™ is a domain-independent back-end framework for rolling out software updates to constrained edge devices as well as more powerful controllers and gateways connected to IP based networking infrastructure.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MgmtDistributionSetRequestBodyPut(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'version': 'str',
        'locked': 'bool',
        'required_migration_step': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'version': 'version',
        'locked': 'locked',
        'required_migration_step': 'requiredMigrationStep'
    }

    def __init__(self, name=None, description=None, version=None, locked=None, required_migration_step=None):  # noqa: E501
        """MgmtDistributionSetRequestBodyPut - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._version = None
        self._locked = None
        self._required_migration_step = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if version is not None:
            self.version = version
        if locked is not None:
            self.locked = locked
        if required_migration_step is not None:
            self.required_migration_step = required_migration_step

    @property
    def name(self):
        """Gets the name of this MgmtDistributionSetRequestBodyPut.  # noqa: E501

        The name of the entity  # noqa: E501

        :return: The name of this MgmtDistributionSetRequestBodyPut.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MgmtDistributionSetRequestBodyPut.

        The name of the entity  # noqa: E501

        :param name: The name of this MgmtDistributionSetRequestBodyPut.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this MgmtDistributionSetRequestBodyPut.  # noqa: E501

        The description of the entity  # noqa: E501

        :return: The description of this MgmtDistributionSetRequestBodyPut.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MgmtDistributionSetRequestBodyPut.

        The description of the entity  # noqa: E501

        :param description: The description of this MgmtDistributionSetRequestBodyPut.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def version(self):
        """Gets the version of this MgmtDistributionSetRequestBodyPut.  # noqa: E501

        Package version  # noqa: E501

        :return: The version of this MgmtDistributionSetRequestBodyPut.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this MgmtDistributionSetRequestBodyPut.

        Package version  # noqa: E501

        :param version: The version of this MgmtDistributionSetRequestBodyPut.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def locked(self):
        """Gets the locked of this MgmtDistributionSetRequestBodyPut.  # noqa: E501

        Should be set only if change of locked state is requested. If put, the distribution set locked flag will be set to the requested. Note: unlock (i.e. set this property to false) with extreme care! In general once distribution set is locked it shall not be unlocked. Note that it could have been assigned / deployed to targets.  # noqa: E501

        :return: The locked of this MgmtDistributionSetRequestBodyPut.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this MgmtDistributionSetRequestBodyPut.

        Should be set only if change of locked state is requested. If put, the distribution set locked flag will be set to the requested. Note: unlock (i.e. set this property to false) with extreme care! In general once distribution set is locked it shall not be unlocked. Note that it could have been assigned / deployed to targets.  # noqa: E501

        :param locked: The locked of this MgmtDistributionSetRequestBodyPut.  # noqa: E501
        :type: bool
        """

        self._locked = locked

    @property
    def required_migration_step(self):
        """Gets the required_migration_step of this MgmtDistributionSetRequestBodyPut.  # noqa: E501

        True if DS is a required migration step for another DS. As a result the DS’s assignment will not be cancelled when another DS is assigned (note: updatable only if DS is not yet assigned to a target)  # noqa: E501

        :return: The required_migration_step of this MgmtDistributionSetRequestBodyPut.  # noqa: E501
        :rtype: bool
        """
        return self._required_migration_step

    @required_migration_step.setter
    def required_migration_step(self, required_migration_step):
        """Sets the required_migration_step of this MgmtDistributionSetRequestBodyPut.

        True if DS is a required migration step for another DS. As a result the DS’s assignment will not be cancelled when another DS is assigned (note: updatable only if DS is not yet assigned to a target)  # noqa: E501

        :param required_migration_step: The required_migration_step of this MgmtDistributionSetRequestBodyPut.  # noqa: E501
        :type: bool
        """

        self._required_migration_step = required_migration_step

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MgmtDistributionSetRequestBodyPut, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MgmtDistributionSetRequestBodyPut):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
