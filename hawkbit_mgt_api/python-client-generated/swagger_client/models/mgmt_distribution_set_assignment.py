# coding: utf-8

"""
    hawkBit REST APIs

    Eclipse hawkBitâ„¢ is a domain-independent back-end framework for rolling out software updates to constrained edge devices as well as more powerful controllers and gateways connected to IP based networking infrastructure.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MgmtDistributionSetAssignment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'forcetime': 'int',
        'weight': 'int',
        'confirmation_required': 'bool',
        'type': 'str',
        'maintenance_window': 'MgmtMaintenanceWindowRequestBody'
    }

    attribute_map = {
        'id': 'id',
        'forcetime': 'forcetime',
        'weight': 'weight',
        'confirmation_required': 'confirmationRequired',
        'type': 'type',
        'maintenance_window': 'maintenanceWindow'
    }

    def __init__(self, id=None, forcetime=None, weight=None, confirmation_required=None, type=None, maintenance_window=None):  # noqa: E501
        """MgmtDistributionSetAssignment - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._forcetime = None
        self._weight = None
        self._confirmation_required = None
        self._type = None
        self._maintenance_window = None
        self.discriminator = None
        self.id = id
        if forcetime is not None:
            self.forcetime = forcetime
        if weight is not None:
            self.weight = weight
        if confirmation_required is not None:
            self.confirmation_required = confirmation_required
        if type is not None:
            self.type = type
        if maintenance_window is not None:
            self.maintenance_window = maintenance_window

    @property
    def id(self):
        """Gets the id of this MgmtDistributionSetAssignment.  # noqa: E501


        :return: The id of this MgmtDistributionSetAssignment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MgmtDistributionSetAssignment.


        :param id: The id of this MgmtDistributionSetAssignment.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def forcetime(self):
        """Gets the forcetime of this MgmtDistributionSetAssignment.  # noqa: E501

        Forcetime in milliseconds  # noqa: E501

        :return: The forcetime of this MgmtDistributionSetAssignment.  # noqa: E501
        :rtype: int
        """
        return self._forcetime

    @forcetime.setter
    def forcetime(self, forcetime):
        """Sets the forcetime of this MgmtDistributionSetAssignment.

        Forcetime in milliseconds  # noqa: E501

        :param forcetime: The forcetime of this MgmtDistributionSetAssignment.  # noqa: E501
        :type: int
        """

        self._forcetime = forcetime

    @property
    def weight(self):
        """Gets the weight of this MgmtDistributionSetAssignment.  # noqa: E501

        Importance of the assignment  # noqa: E501

        :return: The weight of this MgmtDistributionSetAssignment.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this MgmtDistributionSetAssignment.

        Importance of the assignment  # noqa: E501

        :param weight: The weight of this MgmtDistributionSetAssignment.  # noqa: E501
        :type: int
        """

        self._weight = weight

    @property
    def confirmation_required(self):
        """Gets the confirmation_required of this MgmtDistributionSetAssignment.  # noqa: E501

        (Available with user consent flow active) Specifies if the confirmation by the device is required for this action  # noqa: E501

        :return: The confirmation_required of this MgmtDistributionSetAssignment.  # noqa: E501
        :rtype: bool
        """
        return self._confirmation_required

    @confirmation_required.setter
    def confirmation_required(self, confirmation_required):
        """Sets the confirmation_required of this MgmtDistributionSetAssignment.

        (Available with user consent flow active) Specifies if the confirmation by the device is required for this action  # noqa: E501

        :param confirmation_required: The confirmation_required of this MgmtDistributionSetAssignment.  # noqa: E501
        :type: bool
        """

        self._confirmation_required = confirmation_required

    @property
    def type(self):
        """Gets the type of this MgmtDistributionSetAssignment.  # noqa: E501

        The type of the assignment  # noqa: E501

        :return: The type of this MgmtDistributionSetAssignment.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MgmtDistributionSetAssignment.

        The type of the assignment  # noqa: E501

        :param type: The type of this MgmtDistributionSetAssignment.  # noqa: E501
        :type: str
        """
        allowed_values = ["soft", "forced", "timeforced", "downloadonly"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def maintenance_window(self):
        """Gets the maintenance_window of this MgmtDistributionSetAssignment.  # noqa: E501


        :return: The maintenance_window of this MgmtDistributionSetAssignment.  # noqa: E501
        :rtype: MgmtMaintenanceWindowRequestBody
        """
        return self._maintenance_window

    @maintenance_window.setter
    def maintenance_window(self, maintenance_window):
        """Sets the maintenance_window of this MgmtDistributionSetAssignment.


        :param maintenance_window: The maintenance_window of this MgmtDistributionSetAssignment.  # noqa: E501
        :type: MgmtMaintenanceWindowRequestBody
        """

        self._maintenance_window = maintenance_window

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MgmtDistributionSetAssignment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MgmtDistributionSetAssignment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
