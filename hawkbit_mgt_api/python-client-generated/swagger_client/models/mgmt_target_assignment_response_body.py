# coding: utf-8

"""
    hawkBit REST APIs

    Eclipse hawkBitâ„¢ is a domain-independent back-end framework for rolling out software updates to constrained edge devices as well as more powerful controllers and gateways connected to IP based networking infrastructure.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MgmtTargetAssignmentResponseBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'already_assigned': 'int',
        'assigned_actions': 'list[MgmtActionId]',
        'links': 'Links',
        'assigned': 'int',
        'total': 'int'
    }

    attribute_map = {
        'already_assigned': 'alreadyAssigned',
        'assigned_actions': 'assignedActions',
        'links': '_links',
        'assigned': 'assigned',
        'total': 'total'
    }

    def __init__(self, already_assigned=None, assigned_actions=None, links=None, assigned=None, total=None):  # noqa: E501
        """MgmtTargetAssignmentResponseBody - a model defined in Swagger"""  # noqa: E501
        self._already_assigned = None
        self._assigned_actions = None
        self._links = None
        self._assigned = None
        self._total = None
        self.discriminator = None
        if already_assigned is not None:
            self.already_assigned = already_assigned
        if assigned_actions is not None:
            self.assigned_actions = assigned_actions
        if links is not None:
            self.links = links
        if assigned is not None:
            self.assigned = assigned
        if total is not None:
            self.total = total

    @property
    def already_assigned(self):
        """Gets the already_assigned of this MgmtTargetAssignmentResponseBody.  # noqa: E501

        Targets that had this distribution set already assigned (in \"offline\" case this includes targets that have arbitrary updates running)  # noqa: E501

        :return: The already_assigned of this MgmtTargetAssignmentResponseBody.  # noqa: E501
        :rtype: int
        """
        return self._already_assigned

    @already_assigned.setter
    def already_assigned(self, already_assigned):
        """Sets the already_assigned of this MgmtTargetAssignmentResponseBody.

        Targets that had this distribution set already assigned (in \"offline\" case this includes targets that have arbitrary updates running)  # noqa: E501

        :param already_assigned: The already_assigned of this MgmtTargetAssignmentResponseBody.  # noqa: E501
        :type: int
        """

        self._already_assigned = already_assigned

    @property
    def assigned_actions(self):
        """Gets the assigned_actions of this MgmtTargetAssignmentResponseBody.  # noqa: E501

        The newly created actions as a result of this assignment  # noqa: E501

        :return: The assigned_actions of this MgmtTargetAssignmentResponseBody.  # noqa: E501
        :rtype: list[MgmtActionId]
        """
        return self._assigned_actions

    @assigned_actions.setter
    def assigned_actions(self, assigned_actions):
        """Sets the assigned_actions of this MgmtTargetAssignmentResponseBody.

        The newly created actions as a result of this assignment  # noqa: E501

        :param assigned_actions: The assigned_actions of this MgmtTargetAssignmentResponseBody.  # noqa: E501
        :type: list[MgmtActionId]
        """

        self._assigned_actions = assigned_actions

    @property
    def links(self):
        """Gets the links of this MgmtTargetAssignmentResponseBody.  # noqa: E501


        :return: The links of this MgmtTargetAssignmentResponseBody.  # noqa: E501
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this MgmtTargetAssignmentResponseBody.


        :param links: The links of this MgmtTargetAssignmentResponseBody.  # noqa: E501
        :type: Links
        """

        self._links = links

    @property
    def assigned(self):
        """Gets the assigned of this MgmtTargetAssignmentResponseBody.  # noqa: E501


        :return: The assigned of this MgmtTargetAssignmentResponseBody.  # noqa: E501
        :rtype: int
        """
        return self._assigned

    @assigned.setter
    def assigned(self, assigned):
        """Sets the assigned of this MgmtTargetAssignmentResponseBody.


        :param assigned: The assigned of this MgmtTargetAssignmentResponseBody.  # noqa: E501
        :type: int
        """

        self._assigned = assigned

    @property
    def total(self):
        """Gets the total of this MgmtTargetAssignmentResponseBody.  # noqa: E501


        :return: The total of this MgmtTargetAssignmentResponseBody.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this MgmtTargetAssignmentResponseBody.


        :param total: The total of this MgmtTargetAssignmentResponseBody.  # noqa: E501
        :type: int
        """

        self._total = total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MgmtTargetAssignmentResponseBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MgmtTargetAssignmentResponseBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
