# coding: utf-8

"""
    hawkBit REST APIs

    Eclipse hawkBitâ„¢ is a domain-independent back-end framework for rolling out software updates to constrained edge devices as well as more powerful controllers and gateways connected to IP based networking infrastructure.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MgmtTargetRequestBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'controller_id': 'str',
        'address': 'str',
        'security_token': 'str',
        'request_attributes': 'bool',
        'target_type': 'int'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'controller_id': 'controllerId',
        'address': 'address',
        'security_token': 'securityToken',
        'request_attributes': 'requestAttributes',
        'target_type': 'targetType'
    }

    def __init__(self, name=None, description=None, controller_id=None, address=None, security_token=None, request_attributes=None, target_type=None):  # noqa: E501
        """MgmtTargetRequestBody - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._controller_id = None
        self._address = None
        self._security_token = None
        self._request_attributes = None
        self._target_type = None
        self.discriminator = None
        self.name = name
        if description is not None:
            self.description = description
        self.controller_id = controller_id
        if address is not None:
            self.address = address
        if security_token is not None:
            self.security_token = security_token
        if request_attributes is not None:
            self.request_attributes = request_attributes
        if target_type is not None:
            self.target_type = target_type

    @property
    def name(self):
        """Gets the name of this MgmtTargetRequestBody.  # noqa: E501

        The name of the entity  # noqa: E501

        :return: The name of this MgmtTargetRequestBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MgmtTargetRequestBody.

        The name of the entity  # noqa: E501

        :param name: The name of this MgmtTargetRequestBody.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this MgmtTargetRequestBody.  # noqa: E501

        The description of the entity  # noqa: E501

        :return: The description of this MgmtTargetRequestBody.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MgmtTargetRequestBody.

        The description of the entity  # noqa: E501

        :param description: The description of this MgmtTargetRequestBody.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def controller_id(self):
        """Gets the controller_id of this MgmtTargetRequestBody.  # noqa: E501

        Controller ID  # noqa: E501

        :return: The controller_id of this MgmtTargetRequestBody.  # noqa: E501
        :rtype: str
        """
        return self._controller_id

    @controller_id.setter
    def controller_id(self, controller_id):
        """Sets the controller_id of this MgmtTargetRequestBody.

        Controller ID  # noqa: E501

        :param controller_id: The controller_id of this MgmtTargetRequestBody.  # noqa: E501
        :type: str
        """
        if controller_id is None:
            raise ValueError("Invalid value for `controller_id`, must not be `None`")  # noqa: E501

        self._controller_id = controller_id

    @property
    def address(self):
        """Gets the address of this MgmtTargetRequestBody.  # noqa: E501

        The last known address URI of the target. Includes information of the target is connected either directly (DDI) through HTTP or indirectly (DMF) through amqp  # noqa: E501

        :return: The address of this MgmtTargetRequestBody.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this MgmtTargetRequestBody.

        The last known address URI of the target. Includes information of the target is connected either directly (DDI) through HTTP or indirectly (DMF) through amqp  # noqa: E501

        :param address: The address of this MgmtTargetRequestBody.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def security_token(self):
        """Gets the security_token of this MgmtTargetRequestBody.  # noqa: E501

        Pre-Shared key that allows targets to authenticate at Direct Device Integration API if enabled in the tenant settings  # noqa: E501

        :return: The security_token of this MgmtTargetRequestBody.  # noqa: E501
        :rtype: str
        """
        return self._security_token

    @security_token.setter
    def security_token(self, security_token):
        """Sets the security_token of this MgmtTargetRequestBody.

        Pre-Shared key that allows targets to authenticate at Direct Device Integration API if enabled in the tenant settings  # noqa: E501

        :param security_token: The security_token of this MgmtTargetRequestBody.  # noqa: E501
        :type: str
        """

        self._security_token = security_token

    @property
    def request_attributes(self):
        """Gets the request_attributes of this MgmtTargetRequestBody.  # noqa: E501

        Request re-transmission of target attributes  # noqa: E501

        :return: The request_attributes of this MgmtTargetRequestBody.  # noqa: E501
        :rtype: bool
        """
        return self._request_attributes

    @request_attributes.setter
    def request_attributes(self, request_attributes):
        """Sets the request_attributes of this MgmtTargetRequestBody.

        Request re-transmission of target attributes  # noqa: E501

        :param request_attributes: The request_attributes of this MgmtTargetRequestBody.  # noqa: E501
        :type: bool
        """

        self._request_attributes = request_attributes

    @property
    def target_type(self):
        """Gets the target_type of this MgmtTargetRequestBody.  # noqa: E501

        ID of the target type  # noqa: E501

        :return: The target_type of this MgmtTargetRequestBody.  # noqa: E501
        :rtype: int
        """
        return self._target_type

    @target_type.setter
    def target_type(self, target_type):
        """Sets the target_type of this MgmtTargetRequestBody.

        ID of the target type  # noqa: E501

        :param target_type: The target_type of this MgmtTargetRequestBody.  # noqa: E501
        :type: int
        """

        self._target_type = target_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MgmtTargetRequestBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MgmtTargetRequestBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
