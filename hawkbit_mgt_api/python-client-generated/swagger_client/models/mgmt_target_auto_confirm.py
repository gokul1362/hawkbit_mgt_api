# coding: utf-8

"""
    hawkBit REST APIs

    Eclipse hawkBitâ„¢ is a domain-independent back-end framework for rolling out software updates to constrained edge devices as well as more powerful controllers and gateways connected to IP based networking infrastructure.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MgmtTargetAutoConfirm(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'initiator': 'str',
        'remark': 'str',
        'activated_at': 'int',
        'links': 'Links'
    }

    attribute_map = {
        'active': 'active',
        'initiator': 'initiator',
        'remark': 'remark',
        'activated_at': 'activatedAt',
        'links': '_links'
    }

    def __init__(self, active=None, initiator=None, remark=None, activated_at=None, links=None):  # noqa: E501
        """MgmtTargetAutoConfirm - a model defined in Swagger"""  # noqa: E501
        self._active = None
        self._initiator = None
        self._remark = None
        self._activated_at = None
        self._links = None
        self.discriminator = None
        self.active = active
        if initiator is not None:
            self.initiator = initiator
        if remark is not None:
            self.remark = remark
        if activated_at is not None:
            self.activated_at = activated_at
        if links is not None:
            self.links = links

    @property
    def active(self):
        """Gets the active of this MgmtTargetAutoConfirm.  # noqa: E501

        Flag if auto confirm is active  # noqa: E501

        :return: The active of this MgmtTargetAutoConfirm.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this MgmtTargetAutoConfirm.

        Flag if auto confirm is active  # noqa: E501

        :param active: The active of this MgmtTargetAutoConfirm.  # noqa: E501
        :type: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")  # noqa: E501

        self._active = active

    @property
    def initiator(self):
        """Gets the initiator of this MgmtTargetAutoConfirm.  # noqa: E501

        Initiator set on activation  # noqa: E501

        :return: The initiator of this MgmtTargetAutoConfirm.  # noqa: E501
        :rtype: str
        """
        return self._initiator

    @initiator.setter
    def initiator(self, initiator):
        """Sets the initiator of this MgmtTargetAutoConfirm.

        Initiator set on activation  # noqa: E501

        :param initiator: The initiator of this MgmtTargetAutoConfirm.  # noqa: E501
        :type: str
        """

        self._initiator = initiator

    @property
    def remark(self):
        """Gets the remark of this MgmtTargetAutoConfirm.  # noqa: E501

        Remark set on activation  # noqa: E501

        :return: The remark of this MgmtTargetAutoConfirm.  # noqa: E501
        :rtype: str
        """
        return self._remark

    @remark.setter
    def remark(self, remark):
        """Sets the remark of this MgmtTargetAutoConfirm.

        Remark set on activation  # noqa: E501

        :param remark: The remark of this MgmtTargetAutoConfirm.  # noqa: E501
        :type: str
        """

        self._remark = remark

    @property
    def activated_at(self):
        """Gets the activated_at of this MgmtTargetAutoConfirm.  # noqa: E501

        Timestamp of the activation  # noqa: E501

        :return: The activated_at of this MgmtTargetAutoConfirm.  # noqa: E501
        :rtype: int
        """
        return self._activated_at

    @activated_at.setter
    def activated_at(self, activated_at):
        """Sets the activated_at of this MgmtTargetAutoConfirm.

        Timestamp of the activation  # noqa: E501

        :param activated_at: The activated_at of this MgmtTargetAutoConfirm.  # noqa: E501
        :type: int
        """

        self._activated_at = activated_at

    @property
    def links(self):
        """Gets the links of this MgmtTargetAutoConfirm.  # noqa: E501


        :return: The links of this MgmtTargetAutoConfirm.  # noqa: E501
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this MgmtTargetAutoConfirm.


        :param links: The links of this MgmtTargetAutoConfirm.  # noqa: E501
        :type: Links
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MgmtTargetAutoConfirm, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MgmtTargetAutoConfirm):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
