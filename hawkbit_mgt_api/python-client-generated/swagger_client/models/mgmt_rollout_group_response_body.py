# coding: utf-8

"""
    hawkBit REST APIs

    Eclipse hawkBitâ„¢ is a domain-independent back-end framework for rolling out software updates to constrained edge devices as well as more powerful controllers and gateways connected to IP based networking infrastructure.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MgmtRolloutGroupResponseBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_by': 'str',
        'created_at': 'int',
        'last_modified_by': 'str',
        'last_modified_at': 'int',
        'name': 'str',
        'description': 'str',
        'success_condition': 'MgmtRolloutCondition',
        'success_action': 'MgmtRolloutSuccessAction',
        'error_condition': 'MgmtRolloutCondition',
        'error_action': 'MgmtRolloutErrorAction',
        'target_filter_query': 'str',
        'target_percentage': 'float',
        'confirmation_required': 'bool',
        'dynamic': 'bool',
        'status': 'str',
        'total_targets': 'int',
        'total_targets_per_status': 'dict(str, int)',
        'links': 'Links',
        'id': 'int'
    }

    attribute_map = {
        'created_by': 'createdBy',
        'created_at': 'createdAt',
        'last_modified_by': 'lastModifiedBy',
        'last_modified_at': 'lastModifiedAt',
        'name': 'name',
        'description': 'description',
        'success_condition': 'successCondition',
        'success_action': 'successAction',
        'error_condition': 'errorCondition',
        'error_action': 'errorAction',
        'target_filter_query': 'targetFilterQuery',
        'target_percentage': 'targetPercentage',
        'confirmation_required': 'confirmationRequired',
        'dynamic': 'dynamic',
        'status': 'status',
        'total_targets': 'totalTargets',
        'total_targets_per_status': 'totalTargetsPerStatus',
        'links': '_links',
        'id': 'id'
    }

    def __init__(self, created_by=None, created_at=None, last_modified_by=None, last_modified_at=None, name=None, description=None, success_condition=None, success_action=None, error_condition=None, error_action=None, target_filter_query=None, target_percentage=None, confirmation_required=None, dynamic=None, status=None, total_targets=None, total_targets_per_status=None, links=None, id=None):  # noqa: E501
        """MgmtRolloutGroupResponseBody - a model defined in Swagger"""  # noqa: E501
        self._created_by = None
        self._created_at = None
        self._last_modified_by = None
        self._last_modified_at = None
        self._name = None
        self._description = None
        self._success_condition = None
        self._success_action = None
        self._error_condition = None
        self._error_action = None
        self._target_filter_query = None
        self._target_percentage = None
        self._confirmation_required = None
        self._dynamic = None
        self._status = None
        self._total_targets = None
        self._total_targets_per_status = None
        self._links = None
        self._id = None
        self.discriminator = None
        if created_by is not None:
            self.created_by = created_by
        if created_at is not None:
            self.created_at = created_at
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by
        if last_modified_at is not None:
            self.last_modified_at = last_modified_at
        self.name = name
        if description is not None:
            self.description = description
        if success_condition is not None:
            self.success_condition = success_condition
        if success_action is not None:
            self.success_action = success_action
        if error_condition is not None:
            self.error_condition = error_condition
        if error_action is not None:
            self.error_action = error_action
        if target_filter_query is not None:
            self.target_filter_query = target_filter_query
        if target_percentage is not None:
            self.target_percentage = target_percentage
        if confirmation_required is not None:
            self.confirmation_required = confirmation_required
        if dynamic is not None:
            self.dynamic = dynamic
        self.status = status
        if total_targets is not None:
            self.total_targets = total_targets
        if total_targets_per_status is not None:
            self.total_targets_per_status = total_targets_per_status
        if links is not None:
            self.links = links
        self.id = id

    @property
    def created_by(self):
        """Gets the created_by of this MgmtRolloutGroupResponseBody.  # noqa: E501

        Entity was originally created by (User, AMQP-Controller, anonymous etc.)  # noqa: E501

        :return: The created_by of this MgmtRolloutGroupResponseBody.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this MgmtRolloutGroupResponseBody.

        Entity was originally created by (User, AMQP-Controller, anonymous etc.)  # noqa: E501

        :param created_by: The created_by of this MgmtRolloutGroupResponseBody.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_at(self):
        """Gets the created_at of this MgmtRolloutGroupResponseBody.  # noqa: E501

        Entity was originally created at (timestamp UTC in milliseconds)  # noqa: E501

        :return: The created_at of this MgmtRolloutGroupResponseBody.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MgmtRolloutGroupResponseBody.

        Entity was originally created at (timestamp UTC in milliseconds)  # noqa: E501

        :param created_at: The created_at of this MgmtRolloutGroupResponseBody.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this MgmtRolloutGroupResponseBody.  # noqa: E501

        Entity was last modified by (User, AMQP-Controller, anonymous etc.)  # noqa: E501

        :return: The last_modified_by of this MgmtRolloutGroupResponseBody.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this MgmtRolloutGroupResponseBody.

        Entity was last modified by (User, AMQP-Controller, anonymous etc.)  # noqa: E501

        :param last_modified_by: The last_modified_by of this MgmtRolloutGroupResponseBody.  # noqa: E501
        :type: str
        """

        self._last_modified_by = last_modified_by

    @property
    def last_modified_at(self):
        """Gets the last_modified_at of this MgmtRolloutGroupResponseBody.  # noqa: E501

        Entity was last modified at (timestamp UTC in milliseconds)  # noqa: E501

        :return: The last_modified_at of this MgmtRolloutGroupResponseBody.  # noqa: E501
        :rtype: int
        """
        return self._last_modified_at

    @last_modified_at.setter
    def last_modified_at(self, last_modified_at):
        """Sets the last_modified_at of this MgmtRolloutGroupResponseBody.

        Entity was last modified at (timestamp UTC in milliseconds)  # noqa: E501

        :param last_modified_at: The last_modified_at of this MgmtRolloutGroupResponseBody.  # noqa: E501
        :type: int
        """

        self._last_modified_at = last_modified_at

    @property
    def name(self):
        """Gets the name of this MgmtRolloutGroupResponseBody.  # noqa: E501


        :return: The name of this MgmtRolloutGroupResponseBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MgmtRolloutGroupResponseBody.


        :param name: The name of this MgmtRolloutGroupResponseBody.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this MgmtRolloutGroupResponseBody.  # noqa: E501


        :return: The description of this MgmtRolloutGroupResponseBody.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MgmtRolloutGroupResponseBody.


        :param description: The description of this MgmtRolloutGroupResponseBody.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def success_condition(self):
        """Gets the success_condition of this MgmtRolloutGroupResponseBody.  # noqa: E501


        :return: The success_condition of this MgmtRolloutGroupResponseBody.  # noqa: E501
        :rtype: MgmtRolloutCondition
        """
        return self._success_condition

    @success_condition.setter
    def success_condition(self, success_condition):
        """Sets the success_condition of this MgmtRolloutGroupResponseBody.


        :param success_condition: The success_condition of this MgmtRolloutGroupResponseBody.  # noqa: E501
        :type: MgmtRolloutCondition
        """

        self._success_condition = success_condition

    @property
    def success_action(self):
        """Gets the success_action of this MgmtRolloutGroupResponseBody.  # noqa: E501


        :return: The success_action of this MgmtRolloutGroupResponseBody.  # noqa: E501
        :rtype: MgmtRolloutSuccessAction
        """
        return self._success_action

    @success_action.setter
    def success_action(self, success_action):
        """Sets the success_action of this MgmtRolloutGroupResponseBody.


        :param success_action: The success_action of this MgmtRolloutGroupResponseBody.  # noqa: E501
        :type: MgmtRolloutSuccessAction
        """

        self._success_action = success_action

    @property
    def error_condition(self):
        """Gets the error_condition of this MgmtRolloutGroupResponseBody.  # noqa: E501


        :return: The error_condition of this MgmtRolloutGroupResponseBody.  # noqa: E501
        :rtype: MgmtRolloutCondition
        """
        return self._error_condition

    @error_condition.setter
    def error_condition(self, error_condition):
        """Sets the error_condition of this MgmtRolloutGroupResponseBody.


        :param error_condition: The error_condition of this MgmtRolloutGroupResponseBody.  # noqa: E501
        :type: MgmtRolloutCondition
        """

        self._error_condition = error_condition

    @property
    def error_action(self):
        """Gets the error_action of this MgmtRolloutGroupResponseBody.  # noqa: E501


        :return: The error_action of this MgmtRolloutGroupResponseBody.  # noqa: E501
        :rtype: MgmtRolloutErrorAction
        """
        return self._error_action

    @error_action.setter
    def error_action(self, error_action):
        """Sets the error_action of this MgmtRolloutGroupResponseBody.


        :param error_action: The error_action of this MgmtRolloutGroupResponseBody.  # noqa: E501
        :type: MgmtRolloutErrorAction
        """

        self._error_action = error_action

    @property
    def target_filter_query(self):
        """Gets the target_filter_query of this MgmtRolloutGroupResponseBody.  # noqa: E501

        The name of the entity  # noqa: E501

        :return: The target_filter_query of this MgmtRolloutGroupResponseBody.  # noqa: E501
        :rtype: str
        """
        return self._target_filter_query

    @target_filter_query.setter
    def target_filter_query(self, target_filter_query):
        """Sets the target_filter_query of this MgmtRolloutGroupResponseBody.

        The name of the entity  # noqa: E501

        :param target_filter_query: The target_filter_query of this MgmtRolloutGroupResponseBody.  # noqa: E501
        :type: str
        """

        self._target_filter_query = target_filter_query

    @property
    def target_percentage(self):
        """Gets the target_percentage of this MgmtRolloutGroupResponseBody.  # noqa: E501

        Percentage of remaining and matching targets that should be added to this group  # noqa: E501

        :return: The target_percentage of this MgmtRolloutGroupResponseBody.  # noqa: E501
        :rtype: float
        """
        return self._target_percentage

    @target_percentage.setter
    def target_percentage(self, target_percentage):
        """Sets the target_percentage of this MgmtRolloutGroupResponseBody.

        Percentage of remaining and matching targets that should be added to this group  # noqa: E501

        :param target_percentage: The target_percentage of this MgmtRolloutGroupResponseBody.  # noqa: E501
        :type: float
        """

        self._target_percentage = target_percentage

    @property
    def confirmation_required(self):
        """Gets the confirmation_required of this MgmtRolloutGroupResponseBody.  # noqa: E501

        (Available with user consent flow active) If the confirmation is required for this rollout group. Confirmation is required per default  # noqa: E501

        :return: The confirmation_required of this MgmtRolloutGroupResponseBody.  # noqa: E501
        :rtype: bool
        """
        return self._confirmation_required

    @confirmation_required.setter
    def confirmation_required(self, confirmation_required):
        """Sets the confirmation_required of this MgmtRolloutGroupResponseBody.

        (Available with user consent flow active) If the confirmation is required for this rollout group. Confirmation is required per default  # noqa: E501

        :param confirmation_required: The confirmation_required of this MgmtRolloutGroupResponseBody.  # noqa: E501
        :type: bool
        """

        self._confirmation_required = confirmation_required

    @property
    def dynamic(self):
        """Gets the dynamic of this MgmtRolloutGroupResponseBody.  # noqa: E501

        If the rollout group is dynamic  # noqa: E501

        :return: The dynamic of this MgmtRolloutGroupResponseBody.  # noqa: E501
        :rtype: bool
        """
        return self._dynamic

    @dynamic.setter
    def dynamic(self, dynamic):
        """Sets the dynamic of this MgmtRolloutGroupResponseBody.

        If the rollout group is dynamic  # noqa: E501

        :param dynamic: The dynamic of this MgmtRolloutGroupResponseBody.  # noqa: E501
        :type: bool
        """

        self._dynamic = dynamic

    @property
    def status(self):
        """Gets the status of this MgmtRolloutGroupResponseBody.  # noqa: E501

        The status of this rollout  # noqa: E501

        :return: The status of this MgmtRolloutGroupResponseBody.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MgmtRolloutGroupResponseBody.

        The status of this rollout  # noqa: E501

        :param status: The status of this MgmtRolloutGroupResponseBody.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def total_targets(self):
        """Gets the total_targets of this MgmtRolloutGroupResponseBody.  # noqa: E501

        The total targets of a rollout  # noqa: E501

        :return: The total_targets of this MgmtRolloutGroupResponseBody.  # noqa: E501
        :rtype: int
        """
        return self._total_targets

    @total_targets.setter
    def total_targets(self, total_targets):
        """Sets the total_targets of this MgmtRolloutGroupResponseBody.

        The total targets of a rollout  # noqa: E501

        :param total_targets: The total_targets of this MgmtRolloutGroupResponseBody.  # noqa: E501
        :type: int
        """

        self._total_targets = total_targets

    @property
    def total_targets_per_status(self):
        """Gets the total_targets_per_status of this MgmtRolloutGroupResponseBody.  # noqa: E501

        The total targets per status  # noqa: E501

        :return: The total_targets_per_status of this MgmtRolloutGroupResponseBody.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._total_targets_per_status

    @total_targets_per_status.setter
    def total_targets_per_status(self, total_targets_per_status):
        """Sets the total_targets_per_status of this MgmtRolloutGroupResponseBody.

        The total targets per status  # noqa: E501

        :param total_targets_per_status: The total_targets_per_status of this MgmtRolloutGroupResponseBody.  # noqa: E501
        :type: dict(str, int)
        """

        self._total_targets_per_status = total_targets_per_status

    @property
    def links(self):
        """Gets the links of this MgmtRolloutGroupResponseBody.  # noqa: E501


        :return: The links of this MgmtRolloutGroupResponseBody.  # noqa: E501
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this MgmtRolloutGroupResponseBody.


        :param links: The links of this MgmtRolloutGroupResponseBody.  # noqa: E501
        :type: Links
        """

        self._links = links

    @property
    def id(self):
        """Gets the id of this MgmtRolloutGroupResponseBody.  # noqa: E501

        Rollouts id  # noqa: E501

        :return: The id of this MgmtRolloutGroupResponseBody.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MgmtRolloutGroupResponseBody.

        Rollouts id  # noqa: E501

        :param id: The id of this MgmtRolloutGroupResponseBody.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MgmtRolloutGroupResponseBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MgmtRolloutGroupResponseBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
