# coding: utf-8

"""
    hawkBit REST APIs

    Eclipse hawkBitâ„¢ is a domain-independent back-end framework for rolling out software updates to constrained edge devices as well as more powerful controllers and gateways connected to IP based networking infrastructure.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MgmtRolloutRestRequestBodyPost(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_by': 'str',
        'created_at': 'int',
        'last_modified_by': 'str',
        'last_modified_at': 'int',
        'name': 'str',
        'description': 'str',
        'success_condition': 'MgmtRolloutCondition',
        'success_action': 'MgmtRolloutSuccessAction',
        'error_condition': 'MgmtRolloutCondition',
        'error_action': 'MgmtRolloutErrorAction',
        'target_filter_query': 'str',
        'distribution_set_id': 'int',
        'amount_groups': 'int',
        'forcetime': 'int',
        'start_at': 'int',
        'weight': 'int',
        'dynamic': 'bool',
        'dynamic_group_template': 'MgmtDynamicRolloutGroupTemplate',
        'confirmation_required': 'bool',
        'type': 'str',
        'groups': 'list[MgmtRolloutGroup]',
        'links': 'Links'
    }

    attribute_map = {
        'created_by': 'createdBy',
        'created_at': 'createdAt',
        'last_modified_by': 'lastModifiedBy',
        'last_modified_at': 'lastModifiedAt',
        'name': 'name',
        'description': 'description',
        'success_condition': 'successCondition',
        'success_action': 'successAction',
        'error_condition': 'errorCondition',
        'error_action': 'errorAction',
        'target_filter_query': 'targetFilterQuery',
        'distribution_set_id': 'distributionSetId',
        'amount_groups': 'amountGroups',
        'forcetime': 'forcetime',
        'start_at': 'startAt',
        'weight': 'weight',
        'dynamic': 'dynamic',
        'dynamic_group_template': 'dynamicGroupTemplate',
        'confirmation_required': 'confirmationRequired',
        'type': 'type',
        'groups': 'groups',
        'links': '_links'
    }

    def __init__(self, created_by=None, created_at=None, last_modified_by=None, last_modified_at=None, name=None, description=None, success_condition=None, success_action=None, error_condition=None, error_action=None, target_filter_query=None, distribution_set_id=None, amount_groups=None, forcetime=None, start_at=None, weight=None, dynamic=None, dynamic_group_template=None, confirmation_required=None, type=None, groups=None, links=None):  # noqa: E501
        """MgmtRolloutRestRequestBodyPost - a model defined in Swagger"""  # noqa: E501
        self._created_by = None
        self._created_at = None
        self._last_modified_by = None
        self._last_modified_at = None
        self._name = None
        self._description = None
        self._success_condition = None
        self._success_action = None
        self._error_condition = None
        self._error_action = None
        self._target_filter_query = None
        self._distribution_set_id = None
        self._amount_groups = None
        self._forcetime = None
        self._start_at = None
        self._weight = None
        self._dynamic = None
        self._dynamic_group_template = None
        self._confirmation_required = None
        self._type = None
        self._groups = None
        self._links = None
        self.discriminator = None
        if created_by is not None:
            self.created_by = created_by
        if created_at is not None:
            self.created_at = created_at
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by
        if last_modified_at is not None:
            self.last_modified_at = last_modified_at
        self.name = name
        if description is not None:
            self.description = description
        if success_condition is not None:
            self.success_condition = success_condition
        if success_action is not None:
            self.success_action = success_action
        if error_condition is not None:
            self.error_condition = error_condition
        if error_action is not None:
            self.error_action = error_action
        if target_filter_query is not None:
            self.target_filter_query = target_filter_query
        if distribution_set_id is not None:
            self.distribution_set_id = distribution_set_id
        if amount_groups is not None:
            self.amount_groups = amount_groups
        if forcetime is not None:
            self.forcetime = forcetime
        if start_at is not None:
            self.start_at = start_at
        if weight is not None:
            self.weight = weight
        if dynamic is not None:
            self.dynamic = dynamic
        if dynamic_group_template is not None:
            self.dynamic_group_template = dynamic_group_template
        if confirmation_required is not None:
            self.confirmation_required = confirmation_required
        if type is not None:
            self.type = type
        if groups is not None:
            self.groups = groups
        if links is not None:
            self.links = links

    @property
    def created_by(self):
        """Gets the created_by of this MgmtRolloutRestRequestBodyPost.  # noqa: E501

        Entity was originally created by (User, AMQP-Controller, anonymous etc.)  # noqa: E501

        :return: The created_by of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this MgmtRolloutRestRequestBodyPost.

        Entity was originally created by (User, AMQP-Controller, anonymous etc.)  # noqa: E501

        :param created_by: The created_by of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_at(self):
        """Gets the created_at of this MgmtRolloutRestRequestBodyPost.  # noqa: E501

        Entity was originally created at (timestamp UTC in milliseconds)  # noqa: E501

        :return: The created_at of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MgmtRolloutRestRequestBodyPost.

        Entity was originally created at (timestamp UTC in milliseconds)  # noqa: E501

        :param created_at: The created_at of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this MgmtRolloutRestRequestBodyPost.  # noqa: E501

        Entity was last modified by (User, AMQP-Controller, anonymous etc.)  # noqa: E501

        :return: The last_modified_by of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this MgmtRolloutRestRequestBodyPost.

        Entity was last modified by (User, AMQP-Controller, anonymous etc.)  # noqa: E501

        :param last_modified_by: The last_modified_by of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :type: str
        """

        self._last_modified_by = last_modified_by

    @property
    def last_modified_at(self):
        """Gets the last_modified_at of this MgmtRolloutRestRequestBodyPost.  # noqa: E501

        Entity was last modified at (timestamp UTC in milliseconds)  # noqa: E501

        :return: The last_modified_at of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :rtype: int
        """
        return self._last_modified_at

    @last_modified_at.setter
    def last_modified_at(self, last_modified_at):
        """Sets the last_modified_at of this MgmtRolloutRestRequestBodyPost.

        Entity was last modified at (timestamp UTC in milliseconds)  # noqa: E501

        :param last_modified_at: The last_modified_at of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :type: int
        """

        self._last_modified_at = last_modified_at

    @property
    def name(self):
        """Gets the name of this MgmtRolloutRestRequestBodyPost.  # noqa: E501


        :return: The name of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MgmtRolloutRestRequestBodyPost.


        :param name: The name of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this MgmtRolloutRestRequestBodyPost.  # noqa: E501


        :return: The description of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MgmtRolloutRestRequestBodyPost.


        :param description: The description of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def success_condition(self):
        """Gets the success_condition of this MgmtRolloutRestRequestBodyPost.  # noqa: E501


        :return: The success_condition of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :rtype: MgmtRolloutCondition
        """
        return self._success_condition

    @success_condition.setter
    def success_condition(self, success_condition):
        """Sets the success_condition of this MgmtRolloutRestRequestBodyPost.


        :param success_condition: The success_condition of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :type: MgmtRolloutCondition
        """

        self._success_condition = success_condition

    @property
    def success_action(self):
        """Gets the success_action of this MgmtRolloutRestRequestBodyPost.  # noqa: E501


        :return: The success_action of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :rtype: MgmtRolloutSuccessAction
        """
        return self._success_action

    @success_action.setter
    def success_action(self, success_action):
        """Sets the success_action of this MgmtRolloutRestRequestBodyPost.


        :param success_action: The success_action of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :type: MgmtRolloutSuccessAction
        """

        self._success_action = success_action

    @property
    def error_condition(self):
        """Gets the error_condition of this MgmtRolloutRestRequestBodyPost.  # noqa: E501


        :return: The error_condition of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :rtype: MgmtRolloutCondition
        """
        return self._error_condition

    @error_condition.setter
    def error_condition(self, error_condition):
        """Sets the error_condition of this MgmtRolloutRestRequestBodyPost.


        :param error_condition: The error_condition of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :type: MgmtRolloutCondition
        """

        self._error_condition = error_condition

    @property
    def error_action(self):
        """Gets the error_action of this MgmtRolloutRestRequestBodyPost.  # noqa: E501


        :return: The error_action of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :rtype: MgmtRolloutErrorAction
        """
        return self._error_action

    @error_action.setter
    def error_action(self, error_action):
        """Sets the error_action of this MgmtRolloutRestRequestBodyPost.


        :param error_action: The error_action of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :type: MgmtRolloutErrorAction
        """

        self._error_action = error_action

    @property
    def target_filter_query(self):
        """Gets the target_filter_query of this MgmtRolloutRestRequestBodyPost.  # noqa: E501

        Target filter query language expression  # noqa: E501

        :return: The target_filter_query of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :rtype: str
        """
        return self._target_filter_query

    @target_filter_query.setter
    def target_filter_query(self, target_filter_query):
        """Sets the target_filter_query of this MgmtRolloutRestRequestBodyPost.

        Target filter query language expression  # noqa: E501

        :param target_filter_query: The target_filter_query of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :type: str
        """

        self._target_filter_query = target_filter_query

    @property
    def distribution_set_id(self):
        """Gets the distribution_set_id of this MgmtRolloutRestRequestBodyPost.  # noqa: E501

        The ID of distribution set of this rollout  # noqa: E501

        :return: The distribution_set_id of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :rtype: int
        """
        return self._distribution_set_id

    @distribution_set_id.setter
    def distribution_set_id(self, distribution_set_id):
        """Sets the distribution_set_id of this MgmtRolloutRestRequestBodyPost.

        The ID of distribution set of this rollout  # noqa: E501

        :param distribution_set_id: The distribution_set_id of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :type: int
        """

        self._distribution_set_id = distribution_set_id

    @property
    def amount_groups(self):
        """Gets the amount_groups of this MgmtRolloutRestRequestBodyPost.  # noqa: E501

        The amount of groups the rollout should split targets into  # noqa: E501

        :return: The amount_groups of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :rtype: int
        """
        return self._amount_groups

    @amount_groups.setter
    def amount_groups(self, amount_groups):
        """Sets the amount_groups of this MgmtRolloutRestRequestBodyPost.

        The amount of groups the rollout should split targets into  # noqa: E501

        :param amount_groups: The amount_groups of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :type: int
        """

        self._amount_groups = amount_groups

    @property
    def forcetime(self):
        """Gets the forcetime of this MgmtRolloutRestRequestBodyPost.  # noqa: E501

        Force time in milliseconds  # noqa: E501

        :return: The forcetime of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :rtype: int
        """
        return self._forcetime

    @forcetime.setter
    def forcetime(self, forcetime):
        """Sets the forcetime of this MgmtRolloutRestRequestBodyPost.

        Force time in milliseconds  # noqa: E501

        :param forcetime: The forcetime of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :type: int
        """

        self._forcetime = forcetime

    @property
    def start_at(self):
        """Gets the start_at of this MgmtRolloutRestRequestBodyPost.  # noqa: E501

        Start at timestamp of Rollout  # noqa: E501

        :return: The start_at of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :rtype: int
        """
        return self._start_at

    @start_at.setter
    def start_at(self, start_at):
        """Sets the start_at of this MgmtRolloutRestRequestBodyPost.

        Start at timestamp of Rollout  # noqa: E501

        :param start_at: The start_at of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :type: int
        """

        self._start_at = start_at

    @property
    def weight(self):
        """Gets the weight of this MgmtRolloutRestRequestBodyPost.  # noqa: E501

        Weight of the resulting Actions  # noqa: E501

        :return: The weight of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this MgmtRolloutRestRequestBodyPost.

        Weight of the resulting Actions  # noqa: E501

        :param weight: The weight of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :type: int
        """

        self._weight = weight

    @property
    def dynamic(self):
        """Gets the dynamic of this MgmtRolloutRestRequestBodyPost.  # noqa: E501


        :return: The dynamic of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :rtype: bool
        """
        return self._dynamic

    @dynamic.setter
    def dynamic(self, dynamic):
        """Sets the dynamic of this MgmtRolloutRestRequestBodyPost.


        :param dynamic: The dynamic of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :type: bool
        """

        self._dynamic = dynamic

    @property
    def dynamic_group_template(self):
        """Gets the dynamic_group_template of this MgmtRolloutRestRequestBodyPost.  # noqa: E501


        :return: The dynamic_group_template of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :rtype: MgmtDynamicRolloutGroupTemplate
        """
        return self._dynamic_group_template

    @dynamic_group_template.setter
    def dynamic_group_template(self, dynamic_group_template):
        """Sets the dynamic_group_template of this MgmtRolloutRestRequestBodyPost.


        :param dynamic_group_template: The dynamic_group_template of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :type: MgmtDynamicRolloutGroupTemplate
        """

        self._dynamic_group_template = dynamic_group_template

    @property
    def confirmation_required(self):
        """Gets the confirmation_required of this MgmtRolloutRestRequestBodyPost.  # noqa: E501

        (Available with user consent flow active) If the confirmation is required for this rollout. Value will be used if confirmation options are missing in the rollout group definitions. Confirmation is required per default  # noqa: E501

        :return: The confirmation_required of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :rtype: bool
        """
        return self._confirmation_required

    @confirmation_required.setter
    def confirmation_required(self, confirmation_required):
        """Sets the confirmation_required of this MgmtRolloutRestRequestBodyPost.

        (Available with user consent flow active) If the confirmation is required for this rollout. Value will be used if confirmation options are missing in the rollout group definitions. Confirmation is required per default  # noqa: E501

        :param confirmation_required: The confirmation_required of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :type: bool
        """

        self._confirmation_required = confirmation_required

    @property
    def type(self):
        """Gets the type of this MgmtRolloutRestRequestBodyPost.  # noqa: E501

        The type of this rollout  # noqa: E501

        :return: The type of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MgmtRolloutRestRequestBodyPost.

        The type of this rollout  # noqa: E501

        :param type: The type of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :type: str
        """
        allowed_values = ["soft", "forced", "timeforced", "downloadonly"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def groups(self):
        """Gets the groups of this MgmtRolloutRestRequestBodyPost.  # noqa: E501

        The list of group definitions  # noqa: E501

        :return: The groups of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :rtype: list[MgmtRolloutGroup]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this MgmtRolloutRestRequestBodyPost.

        The list of group definitions  # noqa: E501

        :param groups: The groups of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :type: list[MgmtRolloutGroup]
        """

        self._groups = groups

    @property
    def links(self):
        """Gets the links of this MgmtRolloutRestRequestBodyPost.  # noqa: E501


        :return: The links of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this MgmtRolloutRestRequestBodyPost.


        :param links: The links of this MgmtRolloutRestRequestBodyPost.  # noqa: E501
        :type: Links
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MgmtRolloutRestRequestBodyPost, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MgmtRolloutRestRequestBodyPost):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
