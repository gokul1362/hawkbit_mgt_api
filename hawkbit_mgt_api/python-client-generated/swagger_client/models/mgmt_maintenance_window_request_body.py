# coding: utf-8

"""
    hawkBit REST APIs

    Eclipse hawkBitâ„¢ is a domain-independent back-end framework for rolling out software updates to constrained edge devices as well as more powerful controllers and gateways connected to IP based networking infrastructure.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MgmtMaintenanceWindowRequestBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'schedule': 'str',
        'duration': 'str',
        'timezone': 'str'
    }

    attribute_map = {
        'schedule': 'schedule',
        'duration': 'duration',
        'timezone': 'timezone'
    }

    def __init__(self, schedule=None, duration=None, timezone=None):  # noqa: E501
        """MgmtMaintenanceWindowRequestBody - a model defined in Swagger"""  # noqa: E501
        self._schedule = None
        self._duration = None
        self._timezone = None
        self.discriminator = None
        if schedule is not None:
            self.schedule = schedule
        if duration is not None:
            self.duration = duration
        if timezone is not None:
            self.timezone = timezone

    @property
    def schedule(self):
        """Gets the schedule of this MgmtMaintenanceWindowRequestBody.  # noqa: E501

        Schedule for the maintenance window start in quartz cron notation, such as '0 15 10 * * ? 2018' for 10:15am every day during the year 2018  # noqa: E501

        :return: The schedule of this MgmtMaintenanceWindowRequestBody.  # noqa: E501
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this MgmtMaintenanceWindowRequestBody.

        Schedule for the maintenance window start in quartz cron notation, such as '0 15 10 * * ? 2018' for 10:15am every day during the year 2018  # noqa: E501

        :param schedule: The schedule of this MgmtMaintenanceWindowRequestBody.  # noqa: E501
        :type: str
        """

        self._schedule = schedule

    @property
    def duration(self):
        """Gets the duration of this MgmtMaintenanceWindowRequestBody.  # noqa: E501

        Duration of the window, such as '02:00:00' for 2 hours  # noqa: E501

        :return: The duration of this MgmtMaintenanceWindowRequestBody.  # noqa: E501
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this MgmtMaintenanceWindowRequestBody.

        Duration of the window, such as '02:00:00' for 2 hours  # noqa: E501

        :param duration: The duration of this MgmtMaintenanceWindowRequestBody.  # noqa: E501
        :type: str
        """

        self._duration = duration

    @property
    def timezone(self):
        """Gets the timezone of this MgmtMaintenanceWindowRequestBody.  # noqa: E501

        A time-zone offset from Greenwich/UTC, such as '+02:00'  # noqa: E501

        :return: The timezone of this MgmtMaintenanceWindowRequestBody.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this MgmtMaintenanceWindowRequestBody.

        A time-zone offset from Greenwich/UTC, such as '+02:00'  # noqa: E501

        :param timezone: The timezone of this MgmtMaintenanceWindowRequestBody.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MgmtMaintenanceWindowRequestBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MgmtMaintenanceWindowRequestBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
