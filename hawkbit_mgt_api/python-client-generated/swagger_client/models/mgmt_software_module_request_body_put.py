# coding: utf-8

"""
    hawkBit REST APIs

    Eclipse hawkBitâ„¢ is a domain-independent back-end framework for rolling out software updates to constrained edge devices as well as more powerful controllers and gateways connected to IP based networking infrastructure.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MgmtSoftwareModuleRequestBodyPut(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'vendor': 'str',
        'locked': 'bool'
    }

    attribute_map = {
        'description': 'description',
        'vendor': 'vendor',
        'locked': 'locked'
    }

    def __init__(self, description=None, vendor=None, locked=None):  # noqa: E501
        """MgmtSoftwareModuleRequestBodyPut - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._vendor = None
        self._locked = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if vendor is not None:
            self.vendor = vendor
        if locked is not None:
            self.locked = locked

    @property
    def description(self):
        """Gets the description of this MgmtSoftwareModuleRequestBodyPut.  # noqa: E501


        :return: The description of this MgmtSoftwareModuleRequestBodyPut.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MgmtSoftwareModuleRequestBodyPut.


        :param description: The description of this MgmtSoftwareModuleRequestBodyPut.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def vendor(self):
        """Gets the vendor of this MgmtSoftwareModuleRequestBodyPut.  # noqa: E501


        :return: The vendor of this MgmtSoftwareModuleRequestBodyPut.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this MgmtSoftwareModuleRequestBodyPut.


        :param vendor: The vendor of this MgmtSoftwareModuleRequestBodyPut.  # noqa: E501
        :type: str
        """

        self._vendor = vendor

    @property
    def locked(self):
        """Gets the locked of this MgmtSoftwareModuleRequestBodyPut.  # noqa: E501

        Should be set only if change of locked state is requested. If put, the software module locked flag will be set to the requested. Note: unlock (i.e. set this property to false) with extreme care! In general once software module is locked it shall not be unlocked. Note that it could have been assigned / deployed to targets.  # noqa: E501

        :return: The locked of this MgmtSoftwareModuleRequestBodyPut.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this MgmtSoftwareModuleRequestBodyPut.

        Should be set only if change of locked state is requested. If put, the software module locked flag will be set to the requested. Note: unlock (i.e. set this property to false) with extreme care! In general once software module is locked it shall not be unlocked. Note that it could have been assigned / deployed to targets.  # noqa: E501

        :param locked: The locked of this MgmtSoftwareModuleRequestBodyPut.  # noqa: E501
        :type: bool
        """

        self._locked = locked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MgmtSoftwareModuleRequestBodyPut, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MgmtSoftwareModuleRequestBodyPut):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
