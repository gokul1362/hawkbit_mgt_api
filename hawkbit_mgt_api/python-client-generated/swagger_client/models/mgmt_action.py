# coding: utf-8

"""
    hawkBit REST APIs

    Eclipse hawkBitâ„¢ is a domain-independent back-end framework for rolling out software updates to constrained edge devices as well as more powerful controllers and gateways connected to IP based networking infrastructure.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MgmtAction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_by': 'str',
        'created_at': 'int',
        'last_modified_by': 'str',
        'last_modified_at': 'int',
        'type': 'str',
        'status': 'str',
        'detail_status': 'str',
        'force_time': 'int',
        'weight': 'int',
        'rollout': 'int',
        'rollout_name': 'str',
        'last_status_code': 'int',
        'external_ref': 'str',
        'links': 'Links',
        'id': 'int',
        'force_type': 'str'
    }

    attribute_map = {
        'created_by': 'createdBy',
        'created_at': 'createdAt',
        'last_modified_by': 'lastModifiedBy',
        'last_modified_at': 'lastModifiedAt',
        'type': 'type',
        'status': 'status',
        'detail_status': 'detailStatus',
        'force_time': 'forceTime',
        'weight': 'weight',
        'rollout': 'rollout',
        'rollout_name': 'rolloutName',
        'last_status_code': 'lastStatusCode',
        'external_ref': 'externalRef',
        'links': '_links',
        'id': 'id',
        'force_type': 'forceType'
    }

    def __init__(self, created_by=None, created_at=None, last_modified_by=None, last_modified_at=None, type=None, status=None, detail_status=None, force_time=None, weight=None, rollout=None, rollout_name=None, last_status_code=None, external_ref=None, links=None, id=None, force_type=None):  # noqa: E501
        """MgmtAction - a model defined in Swagger"""  # noqa: E501
        self._created_by = None
        self._created_at = None
        self._last_modified_by = None
        self._last_modified_at = None
        self._type = None
        self._status = None
        self._detail_status = None
        self._force_time = None
        self._weight = None
        self._rollout = None
        self._rollout_name = None
        self._last_status_code = None
        self._external_ref = None
        self._links = None
        self._id = None
        self._force_type = None
        self.discriminator = None
        if created_by is not None:
            self.created_by = created_by
        if created_at is not None:
            self.created_at = created_at
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by
        if last_modified_at is not None:
            self.last_modified_at = last_modified_at
        if type is not None:
            self.type = type
        if status is not None:
            self.status = status
        if detail_status is not None:
            self.detail_status = detail_status
        if force_time is not None:
            self.force_time = force_time
        if weight is not None:
            self.weight = weight
        if rollout is not None:
            self.rollout = rollout
        if rollout_name is not None:
            self.rollout_name = rollout_name
        if last_status_code is not None:
            self.last_status_code = last_status_code
        if external_ref is not None:
            self.external_ref = external_ref
        if links is not None:
            self.links = links
        if id is not None:
            self.id = id
        if force_type is not None:
            self.force_type = force_type

    @property
    def created_by(self):
        """Gets the created_by of this MgmtAction.  # noqa: E501

        Entity was originally created by (User, AMQP-Controller, anonymous etc.)  # noqa: E501

        :return: The created_by of this MgmtAction.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this MgmtAction.

        Entity was originally created by (User, AMQP-Controller, anonymous etc.)  # noqa: E501

        :param created_by: The created_by of this MgmtAction.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_at(self):
        """Gets the created_at of this MgmtAction.  # noqa: E501

        Entity was originally created at (timestamp UTC in milliseconds)  # noqa: E501

        :return: The created_at of this MgmtAction.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MgmtAction.

        Entity was originally created at (timestamp UTC in milliseconds)  # noqa: E501

        :param created_at: The created_at of this MgmtAction.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this MgmtAction.  # noqa: E501

        Entity was last modified by (User, AMQP-Controller, anonymous etc.)  # noqa: E501

        :return: The last_modified_by of this MgmtAction.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this MgmtAction.

        Entity was last modified by (User, AMQP-Controller, anonymous etc.)  # noqa: E501

        :param last_modified_by: The last_modified_by of this MgmtAction.  # noqa: E501
        :type: str
        """

        self._last_modified_by = last_modified_by

    @property
    def last_modified_at(self):
        """Gets the last_modified_at of this MgmtAction.  # noqa: E501

        Entity was last modified at (timestamp UTC in milliseconds)  # noqa: E501

        :return: The last_modified_at of this MgmtAction.  # noqa: E501
        :rtype: int
        """
        return self._last_modified_at

    @last_modified_at.setter
    def last_modified_at(self, last_modified_at):
        """Sets the last_modified_at of this MgmtAction.

        Entity was last modified at (timestamp UTC in milliseconds)  # noqa: E501

        :param last_modified_at: The last_modified_at of this MgmtAction.  # noqa: E501
        :type: int
        """

        self._last_modified_at = last_modified_at

    @property
    def type(self):
        """Gets the type of this MgmtAction.  # noqa: E501

        Type of action  # noqa: E501

        :return: The type of this MgmtAction.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MgmtAction.

        Type of action  # noqa: E501

        :param type: The type of this MgmtAction.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def status(self):
        """Gets the status of this MgmtAction.  # noqa: E501

        Status of action  # noqa: E501

        :return: The status of this MgmtAction.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MgmtAction.

        Status of action  # noqa: E501

        :param status: The status of this MgmtAction.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def detail_status(self):
        """Gets the detail_status of this MgmtAction.  # noqa: E501

        Detailed status of action  # noqa: E501

        :return: The detail_status of this MgmtAction.  # noqa: E501
        :rtype: str
        """
        return self._detail_status

    @detail_status.setter
    def detail_status(self, detail_status):
        """Sets the detail_status of this MgmtAction.

        Detailed status of action  # noqa: E501

        :param detail_status: The detail_status of this MgmtAction.  # noqa: E501
        :type: str
        """

        self._detail_status = detail_status

    @property
    def force_time(self):
        """Gets the force_time of this MgmtAction.  # noqa: E501


        :return: The force_time of this MgmtAction.  # noqa: E501
        :rtype: int
        """
        return self._force_time

    @force_time.setter
    def force_time(self, force_time):
        """Sets the force_time of this MgmtAction.


        :param force_time: The force_time of this MgmtAction.  # noqa: E501
        :type: int
        """

        self._force_time = force_time

    @property
    def weight(self):
        """Gets the weight of this MgmtAction.  # noqa: E501

        Weight of the action showing the importance of the update  # noqa: E501

        :return: The weight of this MgmtAction.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this MgmtAction.

        Weight of the action showing the importance of the update  # noqa: E501

        :param weight: The weight of this MgmtAction.  # noqa: E501
        :type: int
        """

        self._weight = weight

    @property
    def rollout(self):
        """Gets the rollout of this MgmtAction.  # noqa: E501

        The ID of the rollout this action was created for  # noqa: E501

        :return: The rollout of this MgmtAction.  # noqa: E501
        :rtype: int
        """
        return self._rollout

    @rollout.setter
    def rollout(self, rollout):
        """Sets the rollout of this MgmtAction.

        The ID of the rollout this action was created for  # noqa: E501

        :param rollout: The rollout of this MgmtAction.  # noqa: E501
        :type: int
        """

        self._rollout = rollout

    @property
    def rollout_name(self):
        """Gets the rollout_name of this MgmtAction.  # noqa: E501

        The name of the rollout this action was created for  # noqa: E501

        :return: The rollout_name of this MgmtAction.  # noqa: E501
        :rtype: str
        """
        return self._rollout_name

    @rollout_name.setter
    def rollout_name(self, rollout_name):
        """Sets the rollout_name of this MgmtAction.

        The name of the rollout this action was created for  # noqa: E501

        :param rollout_name: The rollout_name of this MgmtAction.  # noqa: E501
        :type: str
        """

        self._rollout_name = rollout_name

    @property
    def last_status_code(self):
        """Gets the last_status_code of this MgmtAction.  # noqa: E501

        (Optional) Code provided as part of the last status update that was sent by the device.  # noqa: E501

        :return: The last_status_code of this MgmtAction.  # noqa: E501
        :rtype: int
        """
        return self._last_status_code

    @last_status_code.setter
    def last_status_code(self, last_status_code):
        """Sets the last_status_code of this MgmtAction.

        (Optional) Code provided as part of the last status update that was sent by the device.  # noqa: E501

        :param last_status_code: The last_status_code of this MgmtAction.  # noqa: E501
        :type: int
        """

        self._last_status_code = last_status_code

    @property
    def external_ref(self):
        """Gets the external_ref of this MgmtAction.  # noqa: E501

        If created by external system this field contains the external reference for the action  # noqa: E501

        :return: The external_ref of this MgmtAction.  # noqa: E501
        :rtype: str
        """
        return self._external_ref

    @external_ref.setter
    def external_ref(self, external_ref):
        """Sets the external_ref of this MgmtAction.

        If created by external system this field contains the external reference for the action  # noqa: E501

        :param external_ref: The external_ref of this MgmtAction.  # noqa: E501
        :type: str
        """

        self._external_ref = external_ref

    @property
    def links(self):
        """Gets the links of this MgmtAction.  # noqa: E501


        :return: The links of this MgmtAction.  # noqa: E501
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this MgmtAction.


        :param links: The links of this MgmtAction.  # noqa: E501
        :type: Links
        """

        self._links = links

    @property
    def id(self):
        """Gets the id of this MgmtAction.  # noqa: E501

        ID of the action  # noqa: E501

        :return: The id of this MgmtAction.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MgmtAction.

        ID of the action  # noqa: E501

        :param id: The id of this MgmtAction.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def force_type(self):
        """Gets the force_type of this MgmtAction.  # noqa: E501


        :return: The force_type of this MgmtAction.  # noqa: E501
        :rtype: str
        """
        return self._force_type

    @force_type.setter
    def force_type(self, force_type):
        """Sets the force_type of this MgmtAction.


        :param force_type: The force_type of this MgmtAction.  # noqa: E501
        :type: str
        """
        allowed_values = ["soft", "forced", "timeforced", "downloadonly"]  # noqa: E501
        if force_type not in allowed_values:
            raise ValueError(
                "Invalid value for `force_type` ({0}), must be one of {1}"  # noqa: E501
                .format(force_type, allowed_values)
            )

        self._force_type = force_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MgmtAction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MgmtAction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
