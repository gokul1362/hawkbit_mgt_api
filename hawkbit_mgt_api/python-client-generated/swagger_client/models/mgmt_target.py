# coding: utf-8

"""
    hawkBit REST APIs

    Eclipse hawkBitâ„¢ is a domain-independent back-end framework for rolling out software updates to constrained edge devices as well as more powerful controllers and gateways connected to IP based networking infrastructure.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MgmtTarget(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_by': 'str',
        'created_at': 'int',
        'last_modified_by': 'str',
        'last_modified_at': 'int',
        'name': 'str',
        'description': 'str',
        'controller_id': 'str',
        'update_status': 'str',
        'last_controller_request_at': 'int',
        'installed_at': 'int',
        'ip_address': 'str',
        'address': 'str',
        'poll_status': 'MgmtPollStatus',
        'security_token': 'str',
        'request_attributes': 'bool',
        'target_type': 'int',
        'target_type_name': 'str',
        'auto_confirm_active': 'bool',
        'links': 'Links'
    }

    attribute_map = {
        'created_by': 'createdBy',
        'created_at': 'createdAt',
        'last_modified_by': 'lastModifiedBy',
        'last_modified_at': 'lastModifiedAt',
        'name': 'name',
        'description': 'description',
        'controller_id': 'controllerId',
        'update_status': 'updateStatus',
        'last_controller_request_at': 'lastControllerRequestAt',
        'installed_at': 'installedAt',
        'ip_address': 'ipAddress',
        'address': 'address',
        'poll_status': 'pollStatus',
        'security_token': 'securityToken',
        'request_attributes': 'requestAttributes',
        'target_type': 'targetType',
        'target_type_name': 'targetTypeName',
        'auto_confirm_active': 'autoConfirmActive',
        'links': '_links'
    }

    def __init__(self, created_by=None, created_at=None, last_modified_by=None, last_modified_at=None, name=None, description=None, controller_id=None, update_status=None, last_controller_request_at=None, installed_at=None, ip_address=None, address=None, poll_status=None, security_token=None, request_attributes=None, target_type=None, target_type_name=None, auto_confirm_active=None, links=None):  # noqa: E501
        """MgmtTarget - a model defined in Swagger"""  # noqa: E501
        self._created_by = None
        self._created_at = None
        self._last_modified_by = None
        self._last_modified_at = None
        self._name = None
        self._description = None
        self._controller_id = None
        self._update_status = None
        self._last_controller_request_at = None
        self._installed_at = None
        self._ip_address = None
        self._address = None
        self._poll_status = None
        self._security_token = None
        self._request_attributes = None
        self._target_type = None
        self._target_type_name = None
        self._auto_confirm_active = None
        self._links = None
        self.discriminator = None
        if created_by is not None:
            self.created_by = created_by
        if created_at is not None:
            self.created_at = created_at
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by
        if last_modified_at is not None:
            self.last_modified_at = last_modified_at
        self.name = name
        if description is not None:
            self.description = description
        self.controller_id = controller_id
        if update_status is not None:
            self.update_status = update_status
        if last_controller_request_at is not None:
            self.last_controller_request_at = last_controller_request_at
        if installed_at is not None:
            self.installed_at = installed_at
        if ip_address is not None:
            self.ip_address = ip_address
        if address is not None:
            self.address = address
        if poll_status is not None:
            self.poll_status = poll_status
        if security_token is not None:
            self.security_token = security_token
        if request_attributes is not None:
            self.request_attributes = request_attributes
        if target_type is not None:
            self.target_type = target_type
        if target_type_name is not None:
            self.target_type_name = target_type_name
        if auto_confirm_active is not None:
            self.auto_confirm_active = auto_confirm_active
        if links is not None:
            self.links = links

    @property
    def created_by(self):
        """Gets the created_by of this MgmtTarget.  # noqa: E501

        Entity was originally created by (User, AMQP-Controller, anonymous etc.)  # noqa: E501

        :return: The created_by of this MgmtTarget.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this MgmtTarget.

        Entity was originally created by (User, AMQP-Controller, anonymous etc.)  # noqa: E501

        :param created_by: The created_by of this MgmtTarget.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_at(self):
        """Gets the created_at of this MgmtTarget.  # noqa: E501

        Entity was originally created at (timestamp UTC in milliseconds)  # noqa: E501

        :return: The created_at of this MgmtTarget.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MgmtTarget.

        Entity was originally created at (timestamp UTC in milliseconds)  # noqa: E501

        :param created_at: The created_at of this MgmtTarget.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this MgmtTarget.  # noqa: E501

        Entity was last modified by (User, AMQP-Controller, anonymous etc.)  # noqa: E501

        :return: The last_modified_by of this MgmtTarget.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this MgmtTarget.

        Entity was last modified by (User, AMQP-Controller, anonymous etc.)  # noqa: E501

        :param last_modified_by: The last_modified_by of this MgmtTarget.  # noqa: E501
        :type: str
        """

        self._last_modified_by = last_modified_by

    @property
    def last_modified_at(self):
        """Gets the last_modified_at of this MgmtTarget.  # noqa: E501

        Entity was last modified at (timestamp UTC in milliseconds)  # noqa: E501

        :return: The last_modified_at of this MgmtTarget.  # noqa: E501
        :rtype: int
        """
        return self._last_modified_at

    @last_modified_at.setter
    def last_modified_at(self, last_modified_at):
        """Sets the last_modified_at of this MgmtTarget.

        Entity was last modified at (timestamp UTC in milliseconds)  # noqa: E501

        :param last_modified_at: The last_modified_at of this MgmtTarget.  # noqa: E501
        :type: int
        """

        self._last_modified_at = last_modified_at

    @property
    def name(self):
        """Gets the name of this MgmtTarget.  # noqa: E501


        :return: The name of this MgmtTarget.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MgmtTarget.


        :param name: The name of this MgmtTarget.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this MgmtTarget.  # noqa: E501


        :return: The description of this MgmtTarget.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MgmtTarget.


        :param description: The description of this MgmtTarget.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def controller_id(self):
        """Gets the controller_id of this MgmtTarget.  # noqa: E501

        Controller ID  # noqa: E501

        :return: The controller_id of this MgmtTarget.  # noqa: E501
        :rtype: str
        """
        return self._controller_id

    @controller_id.setter
    def controller_id(self, controller_id):
        """Sets the controller_id of this MgmtTarget.

        Controller ID  # noqa: E501

        :param controller_id: The controller_id of this MgmtTarget.  # noqa: E501
        :type: str
        """
        if controller_id is None:
            raise ValueError("Invalid value for `controller_id`, must not be `None`")  # noqa: E501

        self._controller_id = controller_id

    @property
    def update_status(self):
        """Gets the update_status of this MgmtTarget.  # noqa: E501

        If the target is in sync  # noqa: E501

        :return: The update_status of this MgmtTarget.  # noqa: E501
        :rtype: str
        """
        return self._update_status

    @update_status.setter
    def update_status(self, update_status):
        """Sets the update_status of this MgmtTarget.

        If the target is in sync  # noqa: E501

        :param update_status: The update_status of this MgmtTarget.  # noqa: E501
        :type: str
        """

        self._update_status = update_status

    @property
    def last_controller_request_at(self):
        """Gets the last_controller_request_at of this MgmtTarget.  # noqa: E501

        Timestamp of the last controller request  # noqa: E501

        :return: The last_controller_request_at of this MgmtTarget.  # noqa: E501
        :rtype: int
        """
        return self._last_controller_request_at

    @last_controller_request_at.setter
    def last_controller_request_at(self, last_controller_request_at):
        """Sets the last_controller_request_at of this MgmtTarget.

        Timestamp of the last controller request  # noqa: E501

        :param last_controller_request_at: The last_controller_request_at of this MgmtTarget.  # noqa: E501
        :type: int
        """

        self._last_controller_request_at = last_controller_request_at

    @property
    def installed_at(self):
        """Gets the installed_at of this MgmtTarget.  # noqa: E501

        Install timestamp  # noqa: E501

        :return: The installed_at of this MgmtTarget.  # noqa: E501
        :rtype: int
        """
        return self._installed_at

    @installed_at.setter
    def installed_at(self, installed_at):
        """Sets the installed_at of this MgmtTarget.

        Install timestamp  # noqa: E501

        :param installed_at: The installed_at of this MgmtTarget.  # noqa: E501
        :type: int
        """

        self._installed_at = installed_at

    @property
    def ip_address(self):
        """Gets the ip_address of this MgmtTarget.  # noqa: E501

        Last known IP address of the target. Only presented if IP address of the target itself is known (connected directly through DDI API)  # noqa: E501

        :return: The ip_address of this MgmtTarget.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this MgmtTarget.

        Last known IP address of the target. Only presented if IP address of the target itself is known (connected directly through DDI API)  # noqa: E501

        :param ip_address: The ip_address of this MgmtTarget.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def address(self):
        """Gets the address of this MgmtTarget.  # noqa: E501

        The last known address URI of the target. Includes information of the target is connected either directly (DDI) through HTTP or indirectly (DMF) through amqp.  # noqa: E501

        :return: The address of this MgmtTarget.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this MgmtTarget.

        The last known address URI of the target. Includes information of the target is connected either directly (DDI) through HTTP or indirectly (DMF) through amqp.  # noqa: E501

        :param address: The address of this MgmtTarget.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def poll_status(self):
        """Gets the poll_status of this MgmtTarget.  # noqa: E501


        :return: The poll_status of this MgmtTarget.  # noqa: E501
        :rtype: MgmtPollStatus
        """
        return self._poll_status

    @poll_status.setter
    def poll_status(self, poll_status):
        """Sets the poll_status of this MgmtTarget.


        :param poll_status: The poll_status of this MgmtTarget.  # noqa: E501
        :type: MgmtPollStatus
        """

        self._poll_status = poll_status

    @property
    def security_token(self):
        """Gets the security_token of this MgmtTarget.  # noqa: E501

        Pre-Shared key that allows targets to authenticate at Direct Device Integration API if enabled in the tenant settings  # noqa: E501

        :return: The security_token of this MgmtTarget.  # noqa: E501
        :rtype: str
        """
        return self._security_token

    @security_token.setter
    def security_token(self, security_token):
        """Sets the security_token of this MgmtTarget.

        Pre-Shared key that allows targets to authenticate at Direct Device Integration API if enabled in the tenant settings  # noqa: E501

        :param security_token: The security_token of this MgmtTarget.  # noqa: E501
        :type: str
        """

        self._security_token = security_token

    @property
    def request_attributes(self):
        """Gets the request_attributes of this MgmtTarget.  # noqa: E501

        Request re-transmission of target attributes  # noqa: E501

        :return: The request_attributes of this MgmtTarget.  # noqa: E501
        :rtype: bool
        """
        return self._request_attributes

    @request_attributes.setter
    def request_attributes(self, request_attributes):
        """Sets the request_attributes of this MgmtTarget.

        Request re-transmission of target attributes  # noqa: E501

        :param request_attributes: The request_attributes of this MgmtTarget.  # noqa: E501
        :type: bool
        """

        self._request_attributes = request_attributes

    @property
    def target_type(self):
        """Gets the target_type of this MgmtTarget.  # noqa: E501

        ID of the target type  # noqa: E501

        :return: The target_type of this MgmtTarget.  # noqa: E501
        :rtype: int
        """
        return self._target_type

    @target_type.setter
    def target_type(self, target_type):
        """Sets the target_type of this MgmtTarget.

        ID of the target type  # noqa: E501

        :param target_type: The target_type of this MgmtTarget.  # noqa: E501
        :type: int
        """

        self._target_type = target_type

    @property
    def target_type_name(self):
        """Gets the target_type_name of this MgmtTarget.  # noqa: E501

        Name of the target type  # noqa: E501

        :return: The target_type_name of this MgmtTarget.  # noqa: E501
        :rtype: str
        """
        return self._target_type_name

    @target_type_name.setter
    def target_type_name(self, target_type_name):
        """Sets the target_type_name of this MgmtTarget.

        Name of the target type  # noqa: E501

        :param target_type_name: The target_type_name of this MgmtTarget.  # noqa: E501
        :type: str
        """

        self._target_type_name = target_type_name

    @property
    def auto_confirm_active(self):
        """Gets the auto_confirm_active of this MgmtTarget.  # noqa: E501

        Present if user consent flow active. Indicates if auto-confirm is active  # noqa: E501

        :return: The auto_confirm_active of this MgmtTarget.  # noqa: E501
        :rtype: bool
        """
        return self._auto_confirm_active

    @auto_confirm_active.setter
    def auto_confirm_active(self, auto_confirm_active):
        """Sets the auto_confirm_active of this MgmtTarget.

        Present if user consent flow active. Indicates if auto-confirm is active  # noqa: E501

        :param auto_confirm_active: The auto_confirm_active of this MgmtTarget.  # noqa: E501
        :type: bool
        """

        self._auto_confirm_active = auto_confirm_active

    @property
    def links(self):
        """Gets the links of this MgmtTarget.  # noqa: E501


        :return: The links of this MgmtTarget.  # noqa: E501
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this MgmtTarget.


        :param links: The links of this MgmtTarget.  # noqa: E501
        :type: Links
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MgmtTarget, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MgmtTarget):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
