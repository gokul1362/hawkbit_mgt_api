# coding: utf-8

"""
    hawkBit REST APIs

    Eclipse hawkBitâ„¢ is a domain-independent back-end framework for rolling out software updates to constrained edge devices as well as more powerful controllers and gateways connected to IP based networking infrastructure.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SoftwareModulesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_metadata1(self, body, software_module_id, **kwargs):  # noqa: E501
        """Creates a list of meta data for a specific Software Module  # noqa: E501

        Create a list of meta data entries Required Permission: UPDATE_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_metadata1(body, software_module_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[MgmtSoftwareModuleMetadata] body: (required)
        :param int software_module_id: (required)
        :return: list[MgmtSoftwareModuleMetadata]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_metadata1_with_http_info(body, software_module_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_metadata1_with_http_info(body, software_module_id, **kwargs)  # noqa: E501
            return data

    def create_metadata1_with_http_info(self, body, software_module_id, **kwargs):  # noqa: E501
        """Creates a list of meta data for a specific Software Module  # noqa: E501

        Create a list of meta data entries Required Permission: UPDATE_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_metadata1_with_http_info(body, software_module_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[MgmtSoftwareModuleMetadata] body: (required)
        :param int software_module_id: (required)
        :return: list[MgmtSoftwareModuleMetadata]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'software_module_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_metadata1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_metadata1`")  # noqa: E501
        # verify the required parameter 'software_module_id' is set
        if ('software_module_id' not in params or
                params['software_module_id'] is None):
            raise ValueError("Missing the required parameter `software_module_id` when calling `create_metadata1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'software_module_id' in params:
            path_params['softwareModuleId'] = params['software_module_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/softwaremodules/{softwareModuleId}/metadata', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MgmtSoftwareModuleMetadata]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_software_modules(self, body, **kwargs):  # noqa: E501
        """Create Software Module(s)  # noqa: E501

        Handles the POST request of creating new software modules. The request body must always be a list of modules. Required Permission: CREATE_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_software_modules(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[MgmtSoftwareModuleRequestBodyPost] body: (required)
        :return: list[MgmtSoftwareModule]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_software_modules_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_software_modules_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_software_modules_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Software Module(s)  # noqa: E501

        Handles the POST request of creating new software modules. The request body must always be a list of modules. Required Permission: CREATE_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_software_modules_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[MgmtSoftwareModuleRequestBodyPost] body: (required)
        :return: list[MgmtSoftwareModule]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_software_modules" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_software_modules`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/softwaremodules', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MgmtSoftwareModule]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_artifact(self, software_module_id, artifact_id, **kwargs):  # noqa: E501
        """Delete artifact by Id  # noqa: E501

        Handles the DELETE request for a single Artifact assigned to a SoftwareModule. Required Permission: DELETE_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_artifact(software_module_id, artifact_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int software_module_id: (required)
        :param int artifact_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_artifact_with_http_info(software_module_id, artifact_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_artifact_with_http_info(software_module_id, artifact_id, **kwargs)  # noqa: E501
            return data

    def delete_artifact_with_http_info(self, software_module_id, artifact_id, **kwargs):  # noqa: E501
        """Delete artifact by Id  # noqa: E501

        Handles the DELETE request for a single Artifact assigned to a SoftwareModule. Required Permission: DELETE_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_artifact_with_http_info(software_module_id, artifact_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int software_module_id: (required)
        :param int artifact_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['software_module_id', 'artifact_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_artifact" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'software_module_id' is set
        if ('software_module_id' not in params or
                params['software_module_id'] is None):
            raise ValueError("Missing the required parameter `software_module_id` when calling `delete_artifact`")  # noqa: E501
        # verify the required parameter 'artifact_id' is set
        if ('artifact_id' not in params or
                params['artifact_id'] is None):
            raise ValueError("Missing the required parameter `artifact_id` when calling `delete_artifact`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'software_module_id' in params:
            path_params['softwareModuleId'] = params['software_module_id']  # noqa: E501
        if 'artifact_id' in params:
            path_params['artifactId'] = params['artifact_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/softwaremodules/{softwareModuleId}/artifacts/{artifactId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_metadata1(self, software_module_id, metadata_key, **kwargs):  # noqa: E501
        """Delete single meta data entry from the software module  # noqa: E501

        Delete a single meta data. Required Permission: UPDATE_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_metadata1(software_module_id, metadata_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int software_module_id: (required)
        :param str metadata_key: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_metadata1_with_http_info(software_module_id, metadata_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_metadata1_with_http_info(software_module_id, metadata_key, **kwargs)  # noqa: E501
            return data

    def delete_metadata1_with_http_info(self, software_module_id, metadata_key, **kwargs):  # noqa: E501
        """Delete single meta data entry from the software module  # noqa: E501

        Delete a single meta data. Required Permission: UPDATE_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_metadata1_with_http_info(software_module_id, metadata_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int software_module_id: (required)
        :param str metadata_key: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['software_module_id', 'metadata_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_metadata1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'software_module_id' is set
        if ('software_module_id' not in params or
                params['software_module_id'] is None):
            raise ValueError("Missing the required parameter `software_module_id` when calling `delete_metadata1`")  # noqa: E501
        # verify the required parameter 'metadata_key' is set
        if ('metadata_key' not in params or
                params['metadata_key'] is None):
            raise ValueError("Missing the required parameter `metadata_key` when calling `delete_metadata1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'software_module_id' in params:
            path_params['softwareModuleId'] = params['software_module_id']  # noqa: E501
        if 'metadata_key' in params:
            path_params['metadataKey'] = params['metadata_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/softwaremodules/{softwareModuleId}/metadata/{metadataKey}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_software_module(self, software_module_id, **kwargs):  # noqa: E501
        """Delete Software Module by Id  # noqa: E501

        Handles the DELETE request for a single softwaremodule within Hawkbit. Required Permission: DELETE_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_software_module(software_module_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int software_module_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_software_module_with_http_info(software_module_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_software_module_with_http_info(software_module_id, **kwargs)  # noqa: E501
            return data

    def delete_software_module_with_http_info(self, software_module_id, **kwargs):  # noqa: E501
        """Delete Software Module by Id  # noqa: E501

        Handles the DELETE request for a single softwaremodule within Hawkbit. Required Permission: DELETE_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_software_module_with_http_info(software_module_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int software_module_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['software_module_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_software_module" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'software_module_id' is set
        if ('software_module_id' not in params or
                params['software_module_id'] is None):
            raise ValueError("Missing the required parameter `software_module_id` when calling `delete_software_module`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'software_module_id' in params:
            path_params['softwareModuleId'] = params['software_module_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/softwaremodules/{softwareModuleId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_artifact(self, software_module_id, artifact_id, **kwargs):  # noqa: E501
        """Return single Artifact meta data  # noqa: E501

        Handles the GET request of retrieving a single Artifact meta data request. Required Permission: READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_artifact(software_module_id, artifact_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int software_module_id: (required)
        :param int artifact_id: (required)
        :param bool useartifacturlhandler:
        :return: MgmtArtifact
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_artifact_with_http_info(software_module_id, artifact_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_artifact_with_http_info(software_module_id, artifact_id, **kwargs)  # noqa: E501
            return data

    def get_artifact_with_http_info(self, software_module_id, artifact_id, **kwargs):  # noqa: E501
        """Return single Artifact meta data  # noqa: E501

        Handles the GET request of retrieving a single Artifact meta data request. Required Permission: READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_artifact_with_http_info(software_module_id, artifact_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int software_module_id: (required)
        :param int artifact_id: (required)
        :param bool useartifacturlhandler:
        :return: MgmtArtifact
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['software_module_id', 'artifact_id', 'useartifacturlhandler']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_artifact" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'software_module_id' is set
        if ('software_module_id' not in params or
                params['software_module_id'] is None):
            raise ValueError("Missing the required parameter `software_module_id` when calling `get_artifact`")  # noqa: E501
        # verify the required parameter 'artifact_id' is set
        if ('artifact_id' not in params or
                params['artifact_id'] is None):
            raise ValueError("Missing the required parameter `artifact_id` when calling `get_artifact`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'software_module_id' in params:
            path_params['softwareModuleId'] = params['software_module_id']  # noqa: E501
        if 'artifact_id' in params:
            path_params['artifactId'] = params['artifact_id']  # noqa: E501

        query_params = []
        if 'useartifacturlhandler' in params:
            query_params.append(('useartifacturlhandler', params['useartifacturlhandler']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/softwaremodules/{softwareModuleId}/artifacts/{artifactId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MgmtArtifact',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_artifacts(self, software_module_id, **kwargs):  # noqa: E501
        """Return all meta data of artifacts assigned to a software module  # noqa: E501

        Handles the GET request of retrieving all meta data of artifacts assigned to a software module. Required Permission: READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_artifacts(software_module_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int software_module_id: (required)
        :param str representation:
        :param bool useartifacturlhandler:
        :return: list[MgmtArtifact]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_artifacts_with_http_info(software_module_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_artifacts_with_http_info(software_module_id, **kwargs)  # noqa: E501
            return data

    def get_artifacts_with_http_info(self, software_module_id, **kwargs):  # noqa: E501
        """Return all meta data of artifacts assigned to a software module  # noqa: E501

        Handles the GET request of retrieving all meta data of artifacts assigned to a software module. Required Permission: READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_artifacts_with_http_info(software_module_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int software_module_id: (required)
        :param str representation:
        :param bool useartifacturlhandler:
        :return: list[MgmtArtifact]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['software_module_id', 'representation', 'useartifacturlhandler']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_artifacts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'software_module_id' is set
        if ('software_module_id' not in params or
                params['software_module_id'] is None):
            raise ValueError("Missing the required parameter `software_module_id` when calling `get_artifacts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'software_module_id' in params:
            path_params['softwareModuleId'] = params['software_module_id']  # noqa: E501

        query_params = []
        if 'representation' in params:
            query_params.append(('representation', params['representation']))  # noqa: E501
        if 'useartifacturlhandler' in params:
            query_params.append(('useartifacturlhandler', params['useartifacturlhandler']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/softwaremodules/{softwareModuleId}/artifacts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MgmtArtifact]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_metadata1(self, software_module_id, **kwargs):  # noqa: E501
        """Return meta data for a Software Module  # noqa: E501

        Get a paged list of meta data for a software module. Required Permission: READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metadata1(software_module_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int software_module_id: (required)
        :param str offset: The paging offset (default is 0)
        :param str limit: The maximum number of entries in a page (default is 50)
        :param str sort: The query parameter sort allows to define the sort order for the result of a query. A sort criteria consists of the name of a field and the sort direction (ASC for ascending and DESC descending). The sequence of the sort criteria (multiple can be used) defines the sort order of the entities in the result.
        :param str q: Query fields based on the Feed Item Query Language (FIQL). See Entity Definitions for available fields.
        :return: PagedListMgmtSoftwareModuleMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_metadata1_with_http_info(software_module_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_metadata1_with_http_info(software_module_id, **kwargs)  # noqa: E501
            return data

    def get_metadata1_with_http_info(self, software_module_id, **kwargs):  # noqa: E501
        """Return meta data for a Software Module  # noqa: E501

        Get a paged list of meta data for a software module. Required Permission: READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metadata1_with_http_info(software_module_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int software_module_id: (required)
        :param str offset: The paging offset (default is 0)
        :param str limit: The maximum number of entries in a page (default is 50)
        :param str sort: The query parameter sort allows to define the sort order for the result of a query. A sort criteria consists of the name of a field and the sort direction (ASC for ascending and DESC descending). The sequence of the sort criteria (multiple can be used) defines the sort order of the entities in the result.
        :param str q: Query fields based on the Feed Item Query Language (FIQL). See Entity Definitions for available fields.
        :return: PagedListMgmtSoftwareModuleMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['software_module_id', 'offset', 'limit', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metadata1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'software_module_id' is set
        if ('software_module_id' not in params or
                params['software_module_id'] is None):
            raise ValueError("Missing the required parameter `software_module_id` when calling `get_metadata1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'software_module_id' in params:
            path_params['softwareModuleId'] = params['software_module_id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/softwaremodules/{softwareModuleId}/metadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedListMgmtSoftwareModuleMetadata',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_metadata_value1(self, software_module_id, metadata_key, **kwargs):  # noqa: E501
        """Return single meta data value for a specific key of a Software Module  # noqa: E501

        Get a single meta data value for a meta data key. Required Permission: READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metadata_value1(software_module_id, metadata_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int software_module_id: (required)
        :param str metadata_key: (required)
        :return: MgmtSoftwareModuleMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_metadata_value1_with_http_info(software_module_id, metadata_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_metadata_value1_with_http_info(software_module_id, metadata_key, **kwargs)  # noqa: E501
            return data

    def get_metadata_value1_with_http_info(self, software_module_id, metadata_key, **kwargs):  # noqa: E501
        """Return single meta data value for a specific key of a Software Module  # noqa: E501

        Get a single meta data value for a meta data key. Required Permission: READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metadata_value1_with_http_info(software_module_id, metadata_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int software_module_id: (required)
        :param str metadata_key: (required)
        :return: MgmtSoftwareModuleMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['software_module_id', 'metadata_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metadata_value1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'software_module_id' is set
        if ('software_module_id' not in params or
                params['software_module_id'] is None):
            raise ValueError("Missing the required parameter `software_module_id` when calling `get_metadata_value1`")  # noqa: E501
        # verify the required parameter 'metadata_key' is set
        if ('metadata_key' not in params or
                params['metadata_key'] is None):
            raise ValueError("Missing the required parameter `metadata_key` when calling `get_metadata_value1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'software_module_id' in params:
            path_params['softwareModuleId'] = params['software_module_id']  # noqa: E501
        if 'metadata_key' in params:
            path_params['metadataKey'] = params['metadata_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/softwaremodules/{softwareModuleId}/metadata/{metadataKey}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MgmtSoftwareModuleMetadata',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_software_module(self, software_module_id, **kwargs):  # noqa: E501
        """Return Software Module by id  # noqa: E501

        Handles the GET request of retrieving a single softwaremodule. Required Permission: READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_software_module(software_module_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int software_module_id: (required)
        :return: MgmtSoftwareModule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_software_module_with_http_info(software_module_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_software_module_with_http_info(software_module_id, **kwargs)  # noqa: E501
            return data

    def get_software_module_with_http_info(self, software_module_id, **kwargs):  # noqa: E501
        """Return Software Module by id  # noqa: E501

        Handles the GET request of retrieving a single softwaremodule. Required Permission: READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_software_module_with_http_info(software_module_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int software_module_id: (required)
        :return: MgmtSoftwareModule
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['software_module_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_software_module" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'software_module_id' is set
        if ('software_module_id' not in params or
                params['software_module_id'] is None):
            raise ValueError("Missing the required parameter `software_module_id` when calling `get_software_module`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'software_module_id' in params:
            path_params['softwareModuleId'] = params['software_module_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/softwaremodules/{softwareModuleId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MgmtSoftwareModule',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_software_modules(self, **kwargs):  # noqa: E501
        """Return all Software modules  # noqa: E501

        Handles the GET request of retrieving all softwaremodules. Required Permission: READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_software_modules(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str offset: The paging offset (default is 0)
        :param str limit: The maximum number of entries in a page (default is 50)
        :param str sort: The query parameter sort allows to define the sort order for the result of a query. A sort criteria consists of the name of a field and the sort direction (ASC for ascending and DESC descending). The sequence of the sort criteria (multiple can be used) defines the sort order of the entities in the result.
        :param str q: Query fields based on the Feed Item Query Language (FIQL). See Entity Definitions for available fields.
        :return: PagedListMgmtSoftwareModule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_software_modules_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_software_modules_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_software_modules_with_http_info(self, **kwargs):  # noqa: E501
        """Return all Software modules  # noqa: E501

        Handles the GET request of retrieving all softwaremodules. Required Permission: READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_software_modules_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str offset: The paging offset (default is 0)
        :param str limit: The maximum number of entries in a page (default is 50)
        :param str sort: The query parameter sort allows to define the sort order for the result of a query. A sort criteria consists of the name of a field and the sort direction (ASC for ascending and DESC descending). The sequence of the sort criteria (multiple can be used) defines the sort order of the entities in the result.
        :param str q: Query fields based on the Feed Item Query Language (FIQL). See Entity Definitions for available fields.
        :return: PagedListMgmtSoftwareModule
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_software_modules" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/softwaremodules', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedListMgmtSoftwareModule',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_metadata1(self, body, software_module_id, metadata_key, **kwargs):  # noqa: E501
        """Update a single meta data value of a Software Module  # noqa: E501

        Update a single meta data value for speficic key. Required Permission: UPDATE_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_metadata1(body, software_module_id, metadata_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MgmtSoftwareModuleMetadataBodyPut body: (required)
        :param int software_module_id: (required)
        :param str metadata_key: (required)
        :return: MgmtSoftwareModuleMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_metadata1_with_http_info(body, software_module_id, metadata_key, **kwargs)  # noqa: E501
        else:
            (data) = self.update_metadata1_with_http_info(body, software_module_id, metadata_key, **kwargs)  # noqa: E501
            return data

    def update_metadata1_with_http_info(self, body, software_module_id, metadata_key, **kwargs):  # noqa: E501
        """Update a single meta data value of a Software Module  # noqa: E501

        Update a single meta data value for speficic key. Required Permission: UPDATE_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_metadata1_with_http_info(body, software_module_id, metadata_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MgmtSoftwareModuleMetadataBodyPut body: (required)
        :param int software_module_id: (required)
        :param str metadata_key: (required)
        :return: MgmtSoftwareModuleMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'software_module_id', 'metadata_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_metadata1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_metadata1`")  # noqa: E501
        # verify the required parameter 'software_module_id' is set
        if ('software_module_id' not in params or
                params['software_module_id'] is None):
            raise ValueError("Missing the required parameter `software_module_id` when calling `update_metadata1`")  # noqa: E501
        # verify the required parameter 'metadata_key' is set
        if ('metadata_key' not in params or
                params['metadata_key'] is None):
            raise ValueError("Missing the required parameter `metadata_key` when calling `update_metadata1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'software_module_id' in params:
            path_params['softwareModuleId'] = params['software_module_id']  # noqa: E501
        if 'metadata_key' in params:
            path_params['metadataKey'] = params['metadata_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/softwaremodules/{softwareModuleId}/metadata/{metadataKey}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MgmtSoftwareModuleMetadata',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_software_module(self, body, software_module_id, **kwargs):  # noqa: E501
        """Update Software Module  # noqa: E501

        Handles the PUT request for a single softwaremodule within Hawkbit. Required Permission: UPDATE_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_software_module(body, software_module_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MgmtSoftwareModuleRequestBodyPut body: (required)
        :param int software_module_id: (required)
        :return: MgmtSoftwareModule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_software_module_with_http_info(body, software_module_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_software_module_with_http_info(body, software_module_id, **kwargs)  # noqa: E501
            return data

    def update_software_module_with_http_info(self, body, software_module_id, **kwargs):  # noqa: E501
        """Update Software Module  # noqa: E501

        Handles the PUT request for a single softwaremodule within Hawkbit. Required Permission: UPDATE_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_software_module_with_http_info(body, software_module_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MgmtSoftwareModuleRequestBodyPut body: (required)
        :param int software_module_id: (required)
        :return: MgmtSoftwareModule
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'software_module_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_software_module" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_software_module`")  # noqa: E501
        # verify the required parameter 'software_module_id' is set
        if ('software_module_id' not in params or
                params['software_module_id'] is None):
            raise ValueError("Missing the required parameter `software_module_id` when calling `update_software_module`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'software_module_id' in params:
            path_params['softwareModuleId'] = params['software_module_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/softwaremodules/{softwareModuleId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MgmtSoftwareModule',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_artifact(self, software_module_id, **kwargs):  # noqa: E501
        """Upload artifact  # noqa: E501

        Handles POST request for artifact upload. Required Permission: CREATE_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_artifact(software_module_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int software_module_id: (required)
        :param str file:
        :param str filename:
        :param str md5sum:
        :param str sha1sum:
        :param str sha256sum:
        :return: MgmtArtifact
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_artifact_with_http_info(software_module_id, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_artifact_with_http_info(software_module_id, **kwargs)  # noqa: E501
            return data

    def upload_artifact_with_http_info(self, software_module_id, **kwargs):  # noqa: E501
        """Upload artifact  # noqa: E501

        Handles POST request for artifact upload. Required Permission: CREATE_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_artifact_with_http_info(software_module_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int software_module_id: (required)
        :param str file:
        :param str filename:
        :param str md5sum:
        :param str sha1sum:
        :param str sha256sum:
        :return: MgmtArtifact
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['software_module_id', 'file', 'filename', 'md5sum', 'sha1sum', 'sha256sum']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_artifact" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'software_module_id' is set
        if ('software_module_id' not in params or
                params['software_module_id'] is None):
            raise ValueError("Missing the required parameter `software_module_id` when calling `upload_artifact`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'software_module_id' in params:
            path_params['softwareModuleId'] = params['software_module_id']  # noqa: E501

        query_params = []
        if 'filename' in params:
            query_params.append(('filename', params['filename']))  # noqa: E501
        if 'md5sum' in params:
            query_params.append(('md5sum', params['md5sum']))  # noqa: E501
        if 'sha1sum' in params:
            query_params.append(('sha1sum', params['sha1sum']))  # noqa: E501
        if 'sha256sum' in params:
            query_params.append(('sha256sum', params['sha256sum']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/softwaremodules/{softwareModuleId}/artifacts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MgmtArtifact',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
