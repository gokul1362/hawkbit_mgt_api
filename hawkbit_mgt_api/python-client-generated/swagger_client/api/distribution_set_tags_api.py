# coding: utf-8

"""
    hawkBit REST APIs

    Eclipse hawkBitâ„¢ is a domain-independent back-end framework for rolling out software updates to constrained edge devices as well as more powerful controllers and gateways connected to IP based networking infrastructure.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DistributionSetTagsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def assign_distribution_sets(self, body, distributionset_tag_id, **kwargs):  # noqa: E501
        """Assign distribution sets to the given tag id  # noqa: E501

        Handles the POST request of distribution assignment. Already assigned distribution will be ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_distribution_sets(body, distributionset_tag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[MgmtAssignedDistributionSetRequestBody] body: (required)
        :param int distributionset_tag_id: (required)
        :return: list[MgmtDistributionSet]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assign_distribution_sets_with_http_info(body, distributionset_tag_id, **kwargs)  # noqa: E501
        else:
            (data) = self.assign_distribution_sets_with_http_info(body, distributionset_tag_id, **kwargs)  # noqa: E501
            return data

    def assign_distribution_sets_with_http_info(self, body, distributionset_tag_id, **kwargs):  # noqa: E501
        """Assign distribution sets to the given tag id  # noqa: E501

        Handles the POST request of distribution assignment. Already assigned distribution will be ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_distribution_sets_with_http_info(body, distributionset_tag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[MgmtAssignedDistributionSetRequestBody] body: (required)
        :param int distributionset_tag_id: (required)
        :return: list[MgmtDistributionSet]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'distributionset_tag_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_distribution_sets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `assign_distribution_sets`")  # noqa: E501
        # verify the required parameter 'distributionset_tag_id' is set
        if ('distributionset_tag_id' not in params or
                params['distributionset_tag_id'] is None):
            raise ValueError("Missing the required parameter `distributionset_tag_id` when calling `assign_distribution_sets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'distributionset_tag_id' in params:
            path_params['distributionsetTagId'] = params['distributionset_tag_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsettags/{distributionsetTagId}/assigned', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MgmtDistributionSet]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_distribution_set_tags(self, body, **kwargs):  # noqa: E501
        """Creates new Distribution Set Tags  # noqa: E501

        Handles the POST request of creating new distribution set tag. The request body must always be a list of distribution set tags.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_distribution_set_tags(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[MgmtTagRequestBodyPut] body: (required)
        :return: list[MgmtTag]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_distribution_set_tags_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_distribution_set_tags_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_distribution_set_tags_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates new Distribution Set Tags  # noqa: E501

        Handles the POST request of creating new distribution set tag. The request body must always be a list of distribution set tags.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_distribution_set_tags_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[MgmtTagRequestBodyPut] body: (required)
        :return: list[MgmtTag]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_distribution_set_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_distribution_set_tags`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsettags', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MgmtTag]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_distribution_set_tag(self, distributionset_tag_id, **kwargs):  # noqa: E501
        """Delete a single distribution set tag  # noqa: E501

        Handles the DELETE request of deleting a single distribution set tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_distribution_set_tag(distributionset_tag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distributionset_tag_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_distribution_set_tag_with_http_info(distributionset_tag_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_distribution_set_tag_with_http_info(distributionset_tag_id, **kwargs)  # noqa: E501
            return data

    def delete_distribution_set_tag_with_http_info(self, distributionset_tag_id, **kwargs):  # noqa: E501
        """Delete a single distribution set tag  # noqa: E501

        Handles the DELETE request of deleting a single distribution set tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_distribution_set_tag_with_http_info(distributionset_tag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distributionset_tag_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['distributionset_tag_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_distribution_set_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'distributionset_tag_id' is set
        if ('distributionset_tag_id' not in params or
                params['distributionset_tag_id'] is None):
            raise ValueError("Missing the required parameter `distributionset_tag_id` when calling `delete_distribution_set_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'distributionset_tag_id' in params:
            path_params['distributionsetTagId'] = params['distributionset_tag_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsettags/{distributionsetTagId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_assigned_distribution_sets(self, distributionset_tag_id, **kwargs):  # noqa: E501
        """Return all assigned distribution sets by given tag Id  # noqa: E501

        Handles the GET request of retrieving a list of assigned distributions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_assigned_distribution_sets(distributionset_tag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distributionset_tag_id: (required)
        :param str offset: The paging offset (default is 0)
        :param str limit: The maximum number of entries in a page (default is 50)
        :param str sort: The query parameter sort allows to define the sort order for the result of a query. A sort criteria consists of the name of a field and the sort direction (ASC for ascending and DESC descending). The sequence of the sort criteria (multiple can be used) defines the sort order of the entities in the result.
        :param str q: Query fields based on the Feed Item Query Language (FIQL). See Entity Definitions for available fields.
        :return: PagedListMgmtDistributionSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_assigned_distribution_sets_with_http_info(distributionset_tag_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_assigned_distribution_sets_with_http_info(distributionset_tag_id, **kwargs)  # noqa: E501
            return data

    def get_assigned_distribution_sets_with_http_info(self, distributionset_tag_id, **kwargs):  # noqa: E501
        """Return all assigned distribution sets by given tag Id  # noqa: E501

        Handles the GET request of retrieving a list of assigned distributions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_assigned_distribution_sets_with_http_info(distributionset_tag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distributionset_tag_id: (required)
        :param str offset: The paging offset (default is 0)
        :param str limit: The maximum number of entries in a page (default is 50)
        :param str sort: The query parameter sort allows to define the sort order for the result of a query. A sort criteria consists of the name of a field and the sort direction (ASC for ascending and DESC descending). The sequence of the sort criteria (multiple can be used) defines the sort order of the entities in the result.
        :param str q: Query fields based on the Feed Item Query Language (FIQL). See Entity Definitions for available fields.
        :return: PagedListMgmtDistributionSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['distributionset_tag_id', 'offset', 'limit', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_assigned_distribution_sets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'distributionset_tag_id' is set
        if ('distributionset_tag_id' not in params or
                params['distributionset_tag_id'] is None):
            raise ValueError("Missing the required parameter `distributionset_tag_id` when calling `get_assigned_distribution_sets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'distributionset_tag_id' in params:
            path_params['distributionsetTagId'] = params['distributionset_tag_id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsettags/{distributionsetTagId}/assigned', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedListMgmtDistributionSet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_distribution_set_tag(self, distributionset_tag_id, **kwargs):  # noqa: E501
        """Return single Distribution Set Tag  # noqa: E501

        Handles the GET request of retrieving a single distribution set tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_distribution_set_tag(distributionset_tag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distributionset_tag_id: (required)
        :return: MgmtTag
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_distribution_set_tag_with_http_info(distributionset_tag_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_distribution_set_tag_with_http_info(distributionset_tag_id, **kwargs)  # noqa: E501
            return data

    def get_distribution_set_tag_with_http_info(self, distributionset_tag_id, **kwargs):  # noqa: E501
        """Return single Distribution Set Tag  # noqa: E501

        Handles the GET request of retrieving a single distribution set tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_distribution_set_tag_with_http_info(distributionset_tag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distributionset_tag_id: (required)
        :return: MgmtTag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['distributionset_tag_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_distribution_set_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'distributionset_tag_id' is set
        if ('distributionset_tag_id' not in params or
                params['distributionset_tag_id'] is None):
            raise ValueError("Missing the required parameter `distributionset_tag_id` when calling `get_distribution_set_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'distributionset_tag_id' in params:
            path_params['distributionsetTagId'] = params['distributionset_tag_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsettags/{distributionsetTagId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MgmtTag',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_distribution_set_tags(self, **kwargs):  # noqa: E501
        """Return all Distribution Set Tags  # noqa: E501

        Handles the GET request of retrieving all distribution set tags.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_distribution_set_tags(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str offset: The paging offset (default is 0)
        :param str limit: The maximum number of entries in a page (default is 50)
        :param str sort: The query parameter sort allows to define the sort order for the result of a query. A sort criteria consists of the name of a field and the sort direction (ASC for ascending and DESC descending). The sequence of the sort criteria (multiple can be used) defines the sort order of the entities in the result.
        :param str q: Query fields based on the Feed Item Query Language (FIQL). See Entity Definitions for available fields.
        :return: PagedListMgmtTag
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_distribution_set_tags_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_distribution_set_tags_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_distribution_set_tags_with_http_info(self, **kwargs):  # noqa: E501
        """Return all Distribution Set Tags  # noqa: E501

        Handles the GET request of retrieving all distribution set tags.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_distribution_set_tags_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str offset: The paging offset (default is 0)
        :param str limit: The maximum number of entries in a page (default is 50)
        :param str sort: The query parameter sort allows to define the sort order for the result of a query. A sort criteria consists of the name of a field and the sort direction (ASC for ascending and DESC descending). The sequence of the sort criteria (multiple can be used) defines the sort order of the entities in the result.
        :param str q: Query fields based on the Feed Item Query Language (FIQL). See Entity Definitions for available fields.
        :return: PagedListMgmtTag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_distribution_set_tags" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsettags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedListMgmtTag',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def toggle_tag_assignment1(self, body, distributionset_tag_id, **kwargs):  # noqa: E501
        """Toggle the assignment of distribution sets by the given tag id  # noqa: E501

        Handles the POST request of toggle distribution assignment. The request body must always be a list of distribution set ids.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.toggle_tag_assignment1(body, distributionset_tag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[MgmtAssignedDistributionSetRequestBody] body: (required)
        :param int distributionset_tag_id: (required)
        :return: MgmtDistributionSetTagAssigmentResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.toggle_tag_assignment1_with_http_info(body, distributionset_tag_id, **kwargs)  # noqa: E501
        else:
            (data) = self.toggle_tag_assignment1_with_http_info(body, distributionset_tag_id, **kwargs)  # noqa: E501
            return data

    def toggle_tag_assignment1_with_http_info(self, body, distributionset_tag_id, **kwargs):  # noqa: E501
        """Toggle the assignment of distribution sets by the given tag id  # noqa: E501

        Handles the POST request of toggle distribution assignment. The request body must always be a list of distribution set ids.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.toggle_tag_assignment1_with_http_info(body, distributionset_tag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[MgmtAssignedDistributionSetRequestBody] body: (required)
        :param int distributionset_tag_id: (required)
        :return: MgmtDistributionSetTagAssigmentResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'distributionset_tag_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method toggle_tag_assignment1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `toggle_tag_assignment1`")  # noqa: E501
        # verify the required parameter 'distributionset_tag_id' is set
        if ('distributionset_tag_id' not in params or
                params['distributionset_tag_id'] is None):
            raise ValueError("Missing the required parameter `distributionset_tag_id` when calling `toggle_tag_assignment1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'distributionset_tag_id' in params:
            path_params['distributionsetTagId'] = params['distributionset_tag_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsettags/{distributionsetTagId}/assigned/toggleTagAssignment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MgmtDistributionSetTagAssigmentResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unassign_distribution_set(self, distributionset_tag_id, distributionset_id, **kwargs):  # noqa: E501
        """Unassign one distribution set from the given tag id  # noqa: E501

        Handles the DELETE request of unassign the given distribution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unassign_distribution_set(distributionset_tag_id, distributionset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distributionset_tag_id: (required)
        :param int distributionset_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unassign_distribution_set_with_http_info(distributionset_tag_id, distributionset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.unassign_distribution_set_with_http_info(distributionset_tag_id, distributionset_id, **kwargs)  # noqa: E501
            return data

    def unassign_distribution_set_with_http_info(self, distributionset_tag_id, distributionset_id, **kwargs):  # noqa: E501
        """Unassign one distribution set from the given tag id  # noqa: E501

        Handles the DELETE request of unassign the given distribution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unassign_distribution_set_with_http_info(distributionset_tag_id, distributionset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distributionset_tag_id: (required)
        :param int distributionset_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['distributionset_tag_id', 'distributionset_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unassign_distribution_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'distributionset_tag_id' is set
        if ('distributionset_tag_id' not in params or
                params['distributionset_tag_id'] is None):
            raise ValueError("Missing the required parameter `distributionset_tag_id` when calling `unassign_distribution_set`")  # noqa: E501
        # verify the required parameter 'distributionset_id' is set
        if ('distributionset_id' not in params or
                params['distributionset_id'] is None):
            raise ValueError("Missing the required parameter `distributionset_id` when calling `unassign_distribution_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'distributionset_tag_id' in params:
            path_params['distributionsetTagId'] = params['distributionset_tag_id']  # noqa: E501
        if 'distributionset_id' in params:
            path_params['distributionsetId'] = params['distributionset_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsettags/{distributionsetTagId}/assigned/{distributionsetId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_distribution_set_tag(self, body, distributionset_tag_id, **kwargs):  # noqa: E501
        """Update Distribution Set Tag  # noqa: E501

        Handles the PUT request of updating a distribution set tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_distribution_set_tag(body, distributionset_tag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MgmtTagRequestBodyPut body: (required)
        :param int distributionset_tag_id: (required)
        :return: MgmtTag
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_distribution_set_tag_with_http_info(body, distributionset_tag_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_distribution_set_tag_with_http_info(body, distributionset_tag_id, **kwargs)  # noqa: E501
            return data

    def update_distribution_set_tag_with_http_info(self, body, distributionset_tag_id, **kwargs):  # noqa: E501
        """Update Distribution Set Tag  # noqa: E501

        Handles the PUT request of updating a distribution set tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_distribution_set_tag_with_http_info(body, distributionset_tag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MgmtTagRequestBodyPut body: (required)
        :param int distributionset_tag_id: (required)
        :return: MgmtTag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'distributionset_tag_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_distribution_set_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_distribution_set_tag`")  # noqa: E501
        # verify the required parameter 'distributionset_tag_id' is set
        if ('distributionset_tag_id' not in params or
                params['distributionset_tag_id'] is None):
            raise ValueError("Missing the required parameter `distributionset_tag_id` when calling `update_distribution_set_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'distributionset_tag_id' in params:
            path_params['distributionsetTagId'] = params['distributionset_tag_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsettags/{distributionsetTagId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MgmtTag',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
