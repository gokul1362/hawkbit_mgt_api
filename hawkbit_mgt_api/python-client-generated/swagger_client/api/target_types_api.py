# coding: utf-8

"""
    hawkBit REST APIs

    Eclipse hawkBitâ„¢ is a domain-independent back-end framework for rolling out software updates to constrained edge devices as well as more powerful controllers and gateways connected to IP based networking infrastructure.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TargetTypesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_compatible_distribution_sets(self, body, target_type_id, **kwargs):  # noqa: E501
        """Adding compatibility of a distribution set type to a target type  # noqa: E501

        Handles the POST request for adding compatible distribution set types to a target type. Required Permission: UPDATE_TARGET and READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_compatible_distribution_sets(body, target_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[MgmtDistributionSetTypeAssignment] body: (required)
        :param int target_type_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_compatible_distribution_sets_with_http_info(body, target_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_compatible_distribution_sets_with_http_info(body, target_type_id, **kwargs)  # noqa: E501
            return data

    def add_compatible_distribution_sets_with_http_info(self, body, target_type_id, **kwargs):  # noqa: E501
        """Adding compatibility of a distribution set type to a target type  # noqa: E501

        Handles the POST request for adding compatible distribution set types to a target type. Required Permission: UPDATE_TARGET and READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_compatible_distribution_sets_with_http_info(body, target_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[MgmtDistributionSetTypeAssignment] body: (required)
        :param int target_type_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'target_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_compatible_distribution_sets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_compatible_distribution_sets`")  # noqa: E501
        # verify the required parameter 'target_type_id' is set
        if ('target_type_id' not in params or
                params['target_type_id'] is None):
            raise ValueError("Missing the required parameter `target_type_id` when calling `add_compatible_distribution_sets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_type_id' in params:
            path_params['targetTypeId'] = params['target_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/targettypes/{targetTypeId}/compatibledistributionsettypes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_target_types(self, body, **kwargs):  # noqa: E501
        """Create target types  # noqa: E501

        Handles the POST request for creating new target types. The request body must always be a list of types. Required Permission: CREATE_TARGET  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_target_types(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[MgmtTargetTypeRequestBodyPost] body: (required)
        :return: list[MgmtTargetType]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_target_types_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_target_types_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_target_types_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create target types  # noqa: E501

        Handles the POST request for creating new target types. The request body must always be a list of types. Required Permission: CREATE_TARGET  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_target_types_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[MgmtTargetTypeRequestBodyPost] body: (required)
        :return: list[MgmtTargetType]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_target_types" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_target_types`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/targettypes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MgmtTargetType]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_target_type(self, target_type_id, **kwargs):  # noqa: E501
        """Delete target type by id  # noqa: E501

        Handles the DELETE request for a single target type. Required Permission: DELETE_TARGET  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_target_type(target_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int target_type_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_target_type_with_http_info(target_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_target_type_with_http_info(target_type_id, **kwargs)  # noqa: E501
            return data

    def delete_target_type_with_http_info(self, target_type_id, **kwargs):  # noqa: E501
        """Delete target type by id  # noqa: E501

        Handles the DELETE request for a single target type. Required Permission: DELETE_TARGET  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_target_type_with_http_info(target_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int target_type_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_target_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_type_id' is set
        if ('target_type_id' not in params or
                params['target_type_id'] is None):
            raise ValueError("Missing the required parameter `target_type_id` when calling `delete_target_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_type_id' in params:
            path_params['targetTypeId'] = params['target_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/targettypes/{targetTypeId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_compatible_distribution_sets(self, target_type_id, **kwargs):  # noqa: E501
        """Return list of compatible distribution set types  # noqa: E501

        Handles the GET request of retrieving the list of compatible distribution set types in that target type. Required Permission: READ_TARGET, READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compatible_distribution_sets(target_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int target_type_id: (required)
        :return: list[MgmtDistributionSetType]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_compatible_distribution_sets_with_http_info(target_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_compatible_distribution_sets_with_http_info(target_type_id, **kwargs)  # noqa: E501
            return data

    def get_compatible_distribution_sets_with_http_info(self, target_type_id, **kwargs):  # noqa: E501
        """Return list of compatible distribution set types  # noqa: E501

        Handles the GET request of retrieving the list of compatible distribution set types in that target type. Required Permission: READ_TARGET, READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compatible_distribution_sets_with_http_info(target_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int target_type_id: (required)
        :return: list[MgmtDistributionSetType]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_compatible_distribution_sets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_type_id' is set
        if ('target_type_id' not in params or
                params['target_type_id'] is None):
            raise ValueError("Missing the required parameter `target_type_id` when calling `get_compatible_distribution_sets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_type_id' in params:
            path_params['targetTypeId'] = params['target_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/targettypes/{targetTypeId}/compatibledistributionsettypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MgmtDistributionSetType]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_target_type(self, target_type_id, **kwargs):  # noqa: E501
        """Return target type by id  # noqa: E501

        Handles the GET request of retrieving a single target type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_target_type(target_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int target_type_id: (required)
        :return: MgmtTargetType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_target_type_with_http_info(target_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_target_type_with_http_info(target_type_id, **kwargs)  # noqa: E501
            return data

    def get_target_type_with_http_info(self, target_type_id, **kwargs):  # noqa: E501
        """Return target type by id  # noqa: E501

        Handles the GET request of retrieving a single target type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_target_type_with_http_info(target_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int target_type_id: (required)
        :return: MgmtTargetType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_target_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_type_id' is set
        if ('target_type_id' not in params or
                params['target_type_id'] is None):
            raise ValueError("Missing the required parameter `target_type_id` when calling `get_target_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_type_id' in params:
            path_params['targetTypeId'] = params['target_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/targettypes/{targetTypeId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MgmtTargetType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_target_types(self, **kwargs):  # noqa: E501
        """Return all target types  # noqa: E501

        Handles the GET request of retrieving all target types.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_target_types(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str offset: The paging offset (default is 0)
        :param str limit: The maximum number of entries in a page (default is 50)
        :param str sort: The query parameter sort allows to define the sort order for the result of a query. A sort criteria consists of the name of a field and the sort direction (ASC for ascending and DESC descending). The sequence of the sort criteria (multiple can be used) defines the sort order of the entities in the result.
        :param str q: Query fields based on the Feed Item Query Language (FIQL). See Entity Definitions for available fields.
        :return: PagedListMgmtTargetType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_target_types_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_target_types_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_target_types_with_http_info(self, **kwargs):  # noqa: E501
        """Return all target types  # noqa: E501

        Handles the GET request of retrieving all target types.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_target_types_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str offset: The paging offset (default is 0)
        :param str limit: The maximum number of entries in a page (default is 50)
        :param str sort: The query parameter sort allows to define the sort order for the result of a query. A sort criteria consists of the name of a field and the sort direction (ASC for ascending and DESC descending). The sequence of the sort criteria (multiple can be used) defines the sort order of the entities in the result.
        :param str q: Query fields based on the Feed Item Query Language (FIQL). See Entity Definitions for available fields.
        :return: PagedListMgmtTargetType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_target_types" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/targettypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedListMgmtTargetType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_compatible_distribution_set(self, target_type_id, distribution_set_type_id, **kwargs):  # noqa: E501
        """Remove compatibility of distribution set type from the target type  # noqa: E501

        Handles the DELETE request for removing a distribution set type from a single target type. Required Permission: UPDATE_TARGET and READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_compatible_distribution_set(target_type_id, distribution_set_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int target_type_id: (required)
        :param int distribution_set_type_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_compatible_distribution_set_with_http_info(target_type_id, distribution_set_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_compatible_distribution_set_with_http_info(target_type_id, distribution_set_type_id, **kwargs)  # noqa: E501
            return data

    def remove_compatible_distribution_set_with_http_info(self, target_type_id, distribution_set_type_id, **kwargs):  # noqa: E501
        """Remove compatibility of distribution set type from the target type  # noqa: E501

        Handles the DELETE request for removing a distribution set type from a single target type. Required Permission: UPDATE_TARGET and READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_compatible_distribution_set_with_http_info(target_type_id, distribution_set_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int target_type_id: (required)
        :param int distribution_set_type_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_type_id', 'distribution_set_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_compatible_distribution_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_type_id' is set
        if ('target_type_id' not in params or
                params['target_type_id'] is None):
            raise ValueError("Missing the required parameter `target_type_id` when calling `remove_compatible_distribution_set`")  # noqa: E501
        # verify the required parameter 'distribution_set_type_id' is set
        if ('distribution_set_type_id' not in params or
                params['distribution_set_type_id'] is None):
            raise ValueError("Missing the required parameter `distribution_set_type_id` when calling `remove_compatible_distribution_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_type_id' in params:
            path_params['targetTypeId'] = params['target_type_id']  # noqa: E501
        if 'distribution_set_type_id' in params:
            path_params['distributionSetTypeId'] = params['distribution_set_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/targettypes/{targetTypeId}/compatibledistributionsettypes/{distributionSetTypeId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_target_type(self, body, target_type_id, **kwargs):  # noqa: E501
        """Update target type by id  # noqa: E501

        Handles the PUT request for a single target type. Required Permission: UPDATE_TARGET  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_target_type(body, target_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MgmtTargetTypeRequestBodyPut body: (required)
        :param int target_type_id: (required)
        :return: MgmtTargetType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_target_type_with_http_info(body, target_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_target_type_with_http_info(body, target_type_id, **kwargs)  # noqa: E501
            return data

    def update_target_type_with_http_info(self, body, target_type_id, **kwargs):  # noqa: E501
        """Update target type by id  # noqa: E501

        Handles the PUT request for a single target type. Required Permission: UPDATE_TARGET  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_target_type_with_http_info(body, target_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MgmtTargetTypeRequestBodyPut body: (required)
        :param int target_type_id: (required)
        :return: MgmtTargetType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'target_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_target_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_target_type`")  # noqa: E501
        # verify the required parameter 'target_type_id' is set
        if ('target_type_id' not in params or
                params['target_type_id'] is None):
            raise ValueError("Missing the required parameter `target_type_id` when calling `update_target_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_type_id' in params:
            path_params['targetTypeId'] = params['target_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/targettypes/{targetTypeId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MgmtTargetType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
