# coding: utf-8

"""
    hawkBit REST APIs

    Eclipse hawkBitâ„¢ is a domain-independent back-end framework for rolling out software updates to constrained edge devices as well as more powerful controllers and gateways connected to IP based networking infrastructure.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TargetTagsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def assign_targets(self, body, target_tag_id, **kwargs):  # noqa: E501
        """Assign target(s) to given tagId and return targets  # noqa: E501

        Handles the POST request of target assignment. Already assigned target will be ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_targets(body, target_tag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[MgmtAssignedTargetRequestBody] body: (required)
        :param int target_tag_id: (required)
        :return: list[MgmtTarget]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assign_targets_with_http_info(body, target_tag_id, **kwargs)  # noqa: E501
        else:
            (data) = self.assign_targets_with_http_info(body, target_tag_id, **kwargs)  # noqa: E501
            return data

    def assign_targets_with_http_info(self, body, target_tag_id, **kwargs):  # noqa: E501
        """Assign target(s) to given tagId and return targets  # noqa: E501

        Handles the POST request of target assignment. Already assigned target will be ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_targets_with_http_info(body, target_tag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[MgmtAssignedTargetRequestBody] body: (required)
        :param int target_tag_id: (required)
        :return: list[MgmtTarget]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'target_tag_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_targets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `assign_targets`")  # noqa: E501
        # verify the required parameter 'target_tag_id' is set
        if ('target_tag_id' not in params or
                params['target_tag_id'] is None):
            raise ValueError("Missing the required parameter `target_tag_id` when calling `assign_targets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_tag_id' in params:
            path_params['targetTagId'] = params['target_tag_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/targettags/{targetTagId}/assigned', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MgmtTarget]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assign_targets_by_controller_ids(self, body, target_tag_id, **kwargs):  # noqa: E501
        """Assign target(s) to given tagId  # noqa: E501

        Handles the POST request of target assignment. Already assigned target will be ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_targets_by_controller_ids(body, target_tag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: (required)
        :param int target_tag_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assign_targets_by_controller_ids_with_http_info(body, target_tag_id, **kwargs)  # noqa: E501
        else:
            (data) = self.assign_targets_by_controller_ids_with_http_info(body, target_tag_id, **kwargs)  # noqa: E501
            return data

    def assign_targets_by_controller_ids_with_http_info(self, body, target_tag_id, **kwargs):  # noqa: E501
        """Assign target(s) to given tagId  # noqa: E501

        Handles the POST request of target assignment. Already assigned target will be ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_targets_by_controller_ids_with_http_info(body, target_tag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: (required)
        :param int target_tag_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'target_tag_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_targets_by_controller_ids" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `assign_targets_by_controller_ids`")  # noqa: E501
        # verify the required parameter 'target_tag_id' is set
        if ('target_tag_id' not in params or
                params['target_tag_id'] is None):
            raise ValueError("Missing the required parameter `target_tag_id` when calling `assign_targets_by_controller_ids`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_tag_id' in params:
            path_params['targetTagId'] = params['target_tag_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/targettags/{targetTagId}/assigned', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_target_tags(self, body, **kwargs):  # noqa: E501
        """Create target tag(s)  # noqa: E501

        Handles the POST request of creating new target tag. The request body must always be a list of target tags.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_target_tags(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[MgmtTagRequestBodyPut] body: (required)
        :return: list[MgmtTag]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_target_tags_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_target_tags_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_target_tags_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create target tag(s)  # noqa: E501

        Handles the POST request of creating new target tag. The request body must always be a list of target tags.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_target_tags_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[MgmtTagRequestBodyPut] body: (required)
        :return: list[MgmtTag]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_target_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_target_tags`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/targettags', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MgmtTag]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_target_tag(self, target_tag_id, **kwargs):  # noqa: E501
        """Delete target tag by id  # noqa: E501

        Handles the DELETE request of deleting a single target tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_target_tag(target_tag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int target_tag_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_target_tag_with_http_info(target_tag_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_target_tag_with_http_info(target_tag_id, **kwargs)  # noqa: E501
            return data

    def delete_target_tag_with_http_info(self, target_tag_id, **kwargs):  # noqa: E501
        """Delete target tag by id  # noqa: E501

        Handles the DELETE request of deleting a single target tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_target_tag_with_http_info(target_tag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int target_tag_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_tag_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_target_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_tag_id' is set
        if ('target_tag_id' not in params or
                params['target_tag_id'] is None):
            raise ValueError("Missing the required parameter `target_tag_id` when calling `delete_target_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_tag_id' in params:
            path_params['targetTagId'] = params['target_tag_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/targettags/{targetTagId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_assigned_targets(self, target_tag_id, **kwargs):  # noqa: E501
        """Return assigned targets for tag  # noqa: E501

        Handles the GET request of retrieving a list of assigned targets.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_assigned_targets(target_tag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int target_tag_id: (required)
        :param str offset: The paging offset (default is 0)
        :param str limit: The maximum number of entries in a page (default is 50)
        :param str sort: The query parameter sort allows to define the sort order for the result of a query. A sort criteria consists of the name of a field and the sort direction (ASC for ascending and DESC descending). The sequence of the sort criteria (multiple can be used) defines the sort order of the entities in the result.
        :param str q: Query fields based on the Feed Item Query Language (FIQL). See Entity Definitions for available fields.
        :return: PagedListMgmtTarget
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_assigned_targets_with_http_info(target_tag_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_assigned_targets_with_http_info(target_tag_id, **kwargs)  # noqa: E501
            return data

    def get_assigned_targets_with_http_info(self, target_tag_id, **kwargs):  # noqa: E501
        """Return assigned targets for tag  # noqa: E501

        Handles the GET request of retrieving a list of assigned targets.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_assigned_targets_with_http_info(target_tag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int target_tag_id: (required)
        :param str offset: The paging offset (default is 0)
        :param str limit: The maximum number of entries in a page (default is 50)
        :param str sort: The query parameter sort allows to define the sort order for the result of a query. A sort criteria consists of the name of a field and the sort direction (ASC for ascending and DESC descending). The sequence of the sort criteria (multiple can be used) defines the sort order of the entities in the result.
        :param str q: Query fields based on the Feed Item Query Language (FIQL). See Entity Definitions for available fields.
        :return: PagedListMgmtTarget
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_tag_id', 'offset', 'limit', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_assigned_targets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_tag_id' is set
        if ('target_tag_id' not in params or
                params['target_tag_id'] is None):
            raise ValueError("Missing the required parameter `target_tag_id` when calling `get_assigned_targets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_tag_id' in params:
            path_params['targetTagId'] = params['target_tag_id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/targettags/{targetTagId}/assigned', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedListMgmtTarget',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_target_tag(self, target_tag_id, **kwargs):  # noqa: E501
        """Return target tag by id  # noqa: E501

        Handles the GET request of retrieving a single target tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_target_tag(target_tag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int target_tag_id: (required)
        :return: MgmtTag
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_target_tag_with_http_info(target_tag_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_target_tag_with_http_info(target_tag_id, **kwargs)  # noqa: E501
            return data

    def get_target_tag_with_http_info(self, target_tag_id, **kwargs):  # noqa: E501
        """Return target tag by id  # noqa: E501

        Handles the GET request of retrieving a single target tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_target_tag_with_http_info(target_tag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int target_tag_id: (required)
        :return: MgmtTag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_tag_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_target_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_tag_id' is set
        if ('target_tag_id' not in params or
                params['target_tag_id'] is None):
            raise ValueError("Missing the required parameter `target_tag_id` when calling `get_target_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_tag_id' in params:
            path_params['targetTagId'] = params['target_tag_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/targettags/{targetTagId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MgmtTag',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_target_tags(self, **kwargs):  # noqa: E501
        """Return all target tags  # noqa: E501

        Handles the GET request of retrieving all target tags.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_target_tags(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str offset: The paging offset (default is 0)
        :param str limit: The maximum number of entries in a page (default is 50)
        :param str sort: The query parameter sort allows to define the sort order for the result of a query. A sort criteria consists of the name of a field and the sort direction (ASC for ascending and DESC descending). The sequence of the sort criteria (multiple can be used) defines the sort order of the entities in the result.
        :param str q: Query fields based on the Feed Item Query Language (FIQL). See Entity Definitions for available fields.
        :return: PagedListMgmtTag
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_target_tags_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_target_tags_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_target_tags_with_http_info(self, **kwargs):  # noqa: E501
        """Return all target tags  # noqa: E501

        Handles the GET request of retrieving all target tags.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_target_tags_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str offset: The paging offset (default is 0)
        :param str limit: The maximum number of entries in a page (default is 50)
        :param str sort: The query parameter sort allows to define the sort order for the result of a query. A sort criteria consists of the name of a field and the sort direction (ASC for ascending and DESC descending). The sequence of the sort criteria (multiple can be used) defines the sort order of the entities in the result.
        :param str q: Query fields based on the Feed Item Query Language (FIQL). See Entity Definitions for available fields.
        :return: PagedListMgmtTag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_target_tags" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/targettags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedListMgmtTag',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def toggle_tag_assignment(self, body, target_tag_id, **kwargs):  # noqa: E501
        """Toggles target tag assignment  # noqa: E501

        Handles the POST request of toggle target assignment. The request body must always be a list of controller ids.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.toggle_tag_assignment(body, target_tag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[MgmtAssignedTargetRequestBody] body: (required)
        :param int target_tag_id: (required)
        :return: MgmtTargetTagAssigmentResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.toggle_tag_assignment_with_http_info(body, target_tag_id, **kwargs)  # noqa: E501
        else:
            (data) = self.toggle_tag_assignment_with_http_info(body, target_tag_id, **kwargs)  # noqa: E501
            return data

    def toggle_tag_assignment_with_http_info(self, body, target_tag_id, **kwargs):  # noqa: E501
        """Toggles target tag assignment  # noqa: E501

        Handles the POST request of toggle target assignment. The request body must always be a list of controller ids.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.toggle_tag_assignment_with_http_info(body, target_tag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[MgmtAssignedTargetRequestBody] body: (required)
        :param int target_tag_id: (required)
        :return: MgmtTargetTagAssigmentResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'target_tag_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method toggle_tag_assignment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `toggle_tag_assignment`")  # noqa: E501
        # verify the required parameter 'target_tag_id' is set
        if ('target_tag_id' not in params or
                params['target_tag_id'] is None):
            raise ValueError("Missing the required parameter `target_tag_id` when calling `toggle_tag_assignment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_tag_id' in params:
            path_params['targetTagId'] = params['target_tag_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/targettags/{targetTagId}/assigned/toggleTagAssignment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MgmtTargetTagAssigmentResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unassign_target(self, target_tag_id, controller_id, **kwargs):  # noqa: E501
        """Unassign target from a given tagId  # noqa: E501

        Handles the DELETE request to unassign the given target.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unassign_target(target_tag_id, controller_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int target_tag_id: (required)
        :param str controller_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unassign_target_with_http_info(target_tag_id, controller_id, **kwargs)  # noqa: E501
        else:
            (data) = self.unassign_target_with_http_info(target_tag_id, controller_id, **kwargs)  # noqa: E501
            return data

    def unassign_target_with_http_info(self, target_tag_id, controller_id, **kwargs):  # noqa: E501
        """Unassign target from a given tagId  # noqa: E501

        Handles the DELETE request to unassign the given target.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unassign_target_with_http_info(target_tag_id, controller_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int target_tag_id: (required)
        :param str controller_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_tag_id', 'controller_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unassign_target" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_tag_id' is set
        if ('target_tag_id' not in params or
                params['target_tag_id'] is None):
            raise ValueError("Missing the required parameter `target_tag_id` when calling `unassign_target`")  # noqa: E501
        # verify the required parameter 'controller_id' is set
        if ('controller_id' not in params or
                params['controller_id'] is None):
            raise ValueError("Missing the required parameter `controller_id` when calling `unassign_target`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_tag_id' in params:
            path_params['targetTagId'] = params['target_tag_id']  # noqa: E501
        if 'controller_id' in params:
            path_params['controllerId'] = params['controller_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/targettags/{targetTagId}/assigned/{controllerId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_target_tag(self, body, target_tag_id, **kwargs):  # noqa: E501
        """Update target tag by id  # noqa: E501

        Handles the PUT request of updating a target tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_target_tag(body, target_tag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MgmtTagRequestBodyPut body: (required)
        :param int target_tag_id: (required)
        :return: MgmtTag
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_target_tag_with_http_info(body, target_tag_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_target_tag_with_http_info(body, target_tag_id, **kwargs)  # noqa: E501
            return data

    def update_target_tag_with_http_info(self, body, target_tag_id, **kwargs):  # noqa: E501
        """Update target tag by id  # noqa: E501

        Handles the PUT request of updating a target tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_target_tag_with_http_info(body, target_tag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MgmtTagRequestBodyPut body: (required)
        :param int target_tag_id: (required)
        :return: MgmtTag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'target_tag_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_target_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_target_tag`")  # noqa: E501
        # verify the required parameter 'target_tag_id' is set
        if ('target_tag_id' not in params or
                params['target_tag_id'] is None):
            raise ValueError("Missing the required parameter `target_tag_id` when calling `update_target_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_tag_id' in params:
            path_params['targetTagId'] = params['target_tag_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/targettags/{targetTagId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MgmtTag',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
