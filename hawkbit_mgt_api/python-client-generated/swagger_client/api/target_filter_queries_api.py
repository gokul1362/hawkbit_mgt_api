# coding: utf-8

"""
    hawkBit REST APIs

    Eclipse hawkBitâ„¢ is a domain-independent back-end framework for rolling out software updates to constrained edge devices as well as more powerful controllers and gateways connected to IP based networking infrastructure.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TargetFilterQueriesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_filter(self, body, **kwargs):  # noqa: E501
        """Create target filter  # noqa: E501

        Handles the POST request to create a new target filter query. Required permission: CREATE_TARGET  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_filter(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MgmtTargetFilterQueryRequestBody body: (required)
        :return: MgmtTargetFilterQuery
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_filter_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_filter_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_filter_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create target filter  # noqa: E501

        Handles the POST request to create a new target filter query. Required permission: CREATE_TARGET  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_filter_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MgmtTargetFilterQueryRequestBody body: (required)
        :return: MgmtTargetFilterQuery
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/targetfilters', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MgmtTargetFilterQuery',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_assigned_distribution_set(self, filter_id, **kwargs):  # noqa: E501
        """Remove Distribution Set for auto assignment of a target filter  # noqa: E501

        Removes the auto assign distribution set from the target filter query. Required permission: UPDATE_TARGET  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_assigned_distribution_set(filter_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int filter_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_assigned_distribution_set_with_http_info(filter_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_assigned_distribution_set_with_http_info(filter_id, **kwargs)  # noqa: E501
            return data

    def delete_assigned_distribution_set_with_http_info(self, filter_id, **kwargs):  # noqa: E501
        """Remove Distribution Set for auto assignment of a target filter  # noqa: E501

        Removes the auto assign distribution set from the target filter query. Required permission: UPDATE_TARGET  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_assigned_distribution_set_with_http_info(filter_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int filter_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_assigned_distribution_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filter_id' is set
        if ('filter_id' not in params or
                params['filter_id'] is None):
            raise ValueError("Missing the required parameter `filter_id` when calling `delete_assigned_distribution_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'filter_id' in params:
            path_params['filterId'] = params['filter_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/targetfilters/{filterId}/autoAssignDS', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_filter(self, filter_id, **kwargs):  # noqa: E501
        """Delete target filter by id  # noqa: E501

        Handles the DELETE request of deleting a target filter query. Required permission: DELETE_TARGET  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_filter(filter_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int filter_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_filter_with_http_info(filter_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_filter_with_http_info(filter_id, **kwargs)  # noqa: E501
            return data

    def delete_filter_with_http_info(self, filter_id, **kwargs):  # noqa: E501
        """Delete target filter by id  # noqa: E501

        Handles the DELETE request of deleting a target filter query. Required permission: DELETE_TARGET  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_filter_with_http_info(filter_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int filter_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filter_id' is set
        if ('filter_id' not in params or
                params['filter_id'] is None):
            raise ValueError("Missing the required parameter `filter_id` when calling `delete_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'filter_id' in params:
            path_params['filterId'] = params['filter_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/targetfilters/{filterId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_assigned_distribution_set1(self, filter_id, **kwargs):  # noqa: E501
        """Return distribution set for auto assignment of a specific target filter  # noqa: E501

        Handles the GET request of retrieving the auto assign distribution set. Required permission: READ_TARGET  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_assigned_distribution_set1(filter_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int filter_id: (required)
        :return: MgmtDistributionSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_assigned_distribution_set1_with_http_info(filter_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_assigned_distribution_set1_with_http_info(filter_id, **kwargs)  # noqa: E501
            return data

    def get_assigned_distribution_set1_with_http_info(self, filter_id, **kwargs):  # noqa: E501
        """Return distribution set for auto assignment of a specific target filter  # noqa: E501

        Handles the GET request of retrieving the auto assign distribution set. Required permission: READ_TARGET  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_assigned_distribution_set1_with_http_info(filter_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int filter_id: (required)
        :return: MgmtDistributionSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_assigned_distribution_set1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filter_id' is set
        if ('filter_id' not in params or
                params['filter_id'] is None):
            raise ValueError("Missing the required parameter `filter_id` when calling `get_assigned_distribution_set1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'filter_id' in params:
            path_params['filterId'] = params['filter_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/targetfilters/{filterId}/autoAssignDS', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MgmtDistributionSet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_filter(self, filter_id, **kwargs):  # noqa: E501
        """Return target filter query by id  # noqa: E501

        Handles the GET request of retrieving a single target filter query. Required permission: READ_TARGET  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_filter(filter_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int filter_id: (required)
        :return: MgmtTargetFilterQuery
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_filter_with_http_info(filter_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_filter_with_http_info(filter_id, **kwargs)  # noqa: E501
            return data

    def get_filter_with_http_info(self, filter_id, **kwargs):  # noqa: E501
        """Return target filter query by id  # noqa: E501

        Handles the GET request of retrieving a single target filter query. Required permission: READ_TARGET  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_filter_with_http_info(filter_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int filter_id: (required)
        :return: MgmtTargetFilterQuery
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filter_id' is set
        if ('filter_id' not in params or
                params['filter_id'] is None):
            raise ValueError("Missing the required parameter `filter_id` when calling `get_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'filter_id' in params:
            path_params['filterId'] = params['filter_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/targetfilters/{filterId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MgmtTargetFilterQuery',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_filters(self, **kwargs):  # noqa: E501
        """Return all target filter queries  # noqa: E501

        Handles the GET request of retrieving all target filter queries. Required permission: READ_TARGET  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_filters(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str offset: The paging offset (default is 0)
        :param str limit: The maximum number of entries in a page (default is 50)
        :param str sort: The query parameter sort allows to define the sort order for the result of a query. A sort criteria consists of the name of a field and the sort direction (ASC for ascending and DESC descending). The sequence of the sort criteria (multiple can be used) defines the sort order of the entities in the result.
        :param str q: Query fields based on the Feed Item Query Language (FIQL). See Entity Definitions for available fields.
        :param str representation:
        :return: PagedListMgmtTargetFilterQuery
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_filters_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_filters_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_filters_with_http_info(self, **kwargs):  # noqa: E501
        """Return all target filter queries  # noqa: E501

        Handles the GET request of retrieving all target filter queries. Required permission: READ_TARGET  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_filters_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str offset: The paging offset (default is 0)
        :param str limit: The maximum number of entries in a page (default is 50)
        :param str sort: The query parameter sort allows to define the sort order for the result of a query. A sort criteria consists of the name of a field and the sort direction (ASC for ascending and DESC descending). The sequence of the sort criteria (multiple can be used) defines the sort order of the entities in the result.
        :param str q: Query fields based on the Feed Item Query Language (FIQL). See Entity Definitions for available fields.
        :param str representation:
        :return: PagedListMgmtTargetFilterQuery
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'sort', 'q', 'representation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_filters" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'representation' in params:
            query_params.append(('representation', params['representation']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/targetfilters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedListMgmtTargetFilterQuery',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_assigned_distribution_set1(self, body, filter_id, **kwargs):  # noqa: E501
        """Set auto assignment of distribution set for a target filter query  # noqa: E501

        Handles the POST request of setting the auto assign distribution set for a target filter query. Required permissions: UPDATE_TARGET and READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_assigned_distribution_set1(body, filter_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MgmtDistributionSetAutoAssignment body: (required)
        :param int filter_id: (required)
        :return: MgmtTargetFilterQuery
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_assigned_distribution_set1_with_http_info(body, filter_id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_assigned_distribution_set1_with_http_info(body, filter_id, **kwargs)  # noqa: E501
            return data

    def post_assigned_distribution_set1_with_http_info(self, body, filter_id, **kwargs):  # noqa: E501
        """Set auto assignment of distribution set for a target filter query  # noqa: E501

        Handles the POST request of setting the auto assign distribution set for a target filter query. Required permissions: UPDATE_TARGET and READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_assigned_distribution_set1_with_http_info(body, filter_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MgmtDistributionSetAutoAssignment body: (required)
        :param int filter_id: (required)
        :return: MgmtTargetFilterQuery
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'filter_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_assigned_distribution_set1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_assigned_distribution_set1`")  # noqa: E501
        # verify the required parameter 'filter_id' is set
        if ('filter_id' not in params or
                params['filter_id'] is None):
            raise ValueError("Missing the required parameter `filter_id` when calling `post_assigned_distribution_set1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'filter_id' in params:
            path_params['filterId'] = params['filter_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/targetfilters/{filterId}/autoAssignDS', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MgmtTargetFilterQuery',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_filter(self, body, filter_id, **kwargs):  # noqa: E501
        """Updates target filter query by id  # noqa: E501

        Handles the PUT request of updating a target filter query. Required permission: UPDATE_TARGET  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_filter(body, filter_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MgmtTargetFilterQueryRequestBody body: (required)
        :param int filter_id: (required)
        :return: MgmtTargetFilterQuery
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_filter_with_http_info(body, filter_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_filter_with_http_info(body, filter_id, **kwargs)  # noqa: E501
            return data

    def update_filter_with_http_info(self, body, filter_id, **kwargs):  # noqa: E501
        """Updates target filter query by id  # noqa: E501

        Handles the PUT request of updating a target filter query. Required permission: UPDATE_TARGET  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_filter_with_http_info(body, filter_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MgmtTargetFilterQueryRequestBody body: (required)
        :param int filter_id: (required)
        :return: MgmtTargetFilterQuery
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'filter_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_filter`")  # noqa: E501
        # verify the required parameter 'filter_id' is set
        if ('filter_id' not in params or
                params['filter_id'] is None):
            raise ValueError("Missing the required parameter `filter_id` when calling `update_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'filter_id' in params:
            path_params['filterId'] = params['filter_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/targetfilters/{filterId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MgmtTargetFilterQuery',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
