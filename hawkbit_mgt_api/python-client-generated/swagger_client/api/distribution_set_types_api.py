# coding: utf-8

"""
    hawkBit REST APIs

    Eclipse hawkBitâ„¢ is a domain-independent back-end framework for rolling out software updates to constrained edge devices as well as more powerful controllers and gateways connected to IP based networking infrastructure.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DistributionSetTypesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_mandatory_module(self, body, distribution_set_type_id, **kwargs):  # noqa: E501
        """Add mandatory Software Module Type to a Distribution Set Type  # noqa: E501

        Handles the POST request for adding a mandatory software module type to a distribution set type.Note that a DS type cannot be changed after it has been used by a DS. Required Permission: UPDATE_REPOSITORY and READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_mandatory_module(body, distribution_set_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MgmtId body: (required)
        :param int distribution_set_type_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_mandatory_module_with_http_info(body, distribution_set_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_mandatory_module_with_http_info(body, distribution_set_type_id, **kwargs)  # noqa: E501
            return data

    def add_mandatory_module_with_http_info(self, body, distribution_set_type_id, **kwargs):  # noqa: E501
        """Add mandatory Software Module Type to a Distribution Set Type  # noqa: E501

        Handles the POST request for adding a mandatory software module type to a distribution set type.Note that a DS type cannot be changed after it has been used by a DS. Required Permission: UPDATE_REPOSITORY and READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_mandatory_module_with_http_info(body, distribution_set_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MgmtId body: (required)
        :param int distribution_set_type_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'distribution_set_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_mandatory_module" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_mandatory_module`")  # noqa: E501
        # verify the required parameter 'distribution_set_type_id' is set
        if ('distribution_set_type_id' not in params or
                params['distribution_set_type_id'] is None):
            raise ValueError("Missing the required parameter `distribution_set_type_id` when calling `add_mandatory_module`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'distribution_set_type_id' in params:
            path_params['distributionSetTypeId'] = params['distribution_set_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsettypes/{distributionSetTypeId}/mandatorymoduletypes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_optional_module(self, body, distribution_set_type_id, **kwargs):  # noqa: E501
        """Add optional Software Module Type to a Distribution Set Type  # noqa: E501

        Handles the POST request for adding an optional software module type to a distribution set type.Note that a DS type cannot be changed after it has been used by a DS. Required Permission: UPDATE_REPOSITORY and READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_optional_module(body, distribution_set_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MgmtId body: (required)
        :param int distribution_set_type_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_optional_module_with_http_info(body, distribution_set_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_optional_module_with_http_info(body, distribution_set_type_id, **kwargs)  # noqa: E501
            return data

    def add_optional_module_with_http_info(self, body, distribution_set_type_id, **kwargs):  # noqa: E501
        """Add optional Software Module Type to a Distribution Set Type  # noqa: E501

        Handles the POST request for adding an optional software module type to a distribution set type.Note that a DS type cannot be changed after it has been used by a DS. Required Permission: UPDATE_REPOSITORY and READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_optional_module_with_http_info(body, distribution_set_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MgmtId body: (required)
        :param int distribution_set_type_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'distribution_set_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_optional_module" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_optional_module`")  # noqa: E501
        # verify the required parameter 'distribution_set_type_id' is set
        if ('distribution_set_type_id' not in params or
                params['distribution_set_type_id'] is None):
            raise ValueError("Missing the required parameter `distribution_set_type_id` when calling `add_optional_module`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'distribution_set_type_id' in params:
            path_params['distributionSetTypeId'] = params['distribution_set_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsettypes/{distributionSetTypeId}/optionalmoduletypes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_distribution_set_types(self, body, **kwargs):  # noqa: E501
        """Create new distribution set types  # noqa: E501

        Handles the POST request for creating new distribution set types. The request body must always be a list of types. Required Permission: CREATE_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_distribution_set_types(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[MgmtDistributionSetTypeRequestBodyPost] body: (required)
        :return: list[MgmtDistributionSetType]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_distribution_set_types_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_distribution_set_types_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_distribution_set_types_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create new distribution set types  # noqa: E501

        Handles the POST request for creating new distribution set types. The request body must always be a list of types. Required Permission: CREATE_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_distribution_set_types_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[MgmtDistributionSetTypeRequestBodyPost] body: (required)
        :return: list[MgmtDistributionSetType]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_distribution_set_types" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_distribution_set_types`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsettypes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MgmtDistributionSetType]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_distribution_set_type(self, distribution_set_type_id, **kwargs):  # noqa: E501
        """Delete Distribution Set Type by Id  # noqa: E501

        Handles the DELETE request for a single distribution set type. Required Permission: DELETE_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_distribution_set_type(distribution_set_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_type_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_distribution_set_type_with_http_info(distribution_set_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_distribution_set_type_with_http_info(distribution_set_type_id, **kwargs)  # noqa: E501
            return data

    def delete_distribution_set_type_with_http_info(self, distribution_set_type_id, **kwargs):  # noqa: E501
        """Delete Distribution Set Type by Id  # noqa: E501

        Handles the DELETE request for a single distribution set type. Required Permission: DELETE_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_distribution_set_type_with_http_info(distribution_set_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_type_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['distribution_set_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_distribution_set_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'distribution_set_type_id' is set
        if ('distribution_set_type_id' not in params or
                params['distribution_set_type_id'] is None):
            raise ValueError("Missing the required parameter `distribution_set_type_id` when calling `delete_distribution_set_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'distribution_set_type_id' in params:
            path_params['distributionSetTypeId'] = params['distribution_set_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsettypes/{distributionSetTypeId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_distribution_set_type(self, distribution_set_type_id, **kwargs):  # noqa: E501
        """Return single Distribution Set Type  # noqa: E501

        Handles the GET request of retrieving a single distribution set type. Required Permission: READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_distribution_set_type(distribution_set_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_type_id: (required)
        :return: MgmtDistributionSetType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_distribution_set_type_with_http_info(distribution_set_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_distribution_set_type_with_http_info(distribution_set_type_id, **kwargs)  # noqa: E501
            return data

    def get_distribution_set_type_with_http_info(self, distribution_set_type_id, **kwargs):  # noqa: E501
        """Return single Distribution Set Type  # noqa: E501

        Handles the GET request of retrieving a single distribution set type. Required Permission: READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_distribution_set_type_with_http_info(distribution_set_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_type_id: (required)
        :return: MgmtDistributionSetType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['distribution_set_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_distribution_set_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'distribution_set_type_id' is set
        if ('distribution_set_type_id' not in params or
                params['distribution_set_type_id'] is None):
            raise ValueError("Missing the required parameter `distribution_set_type_id` when calling `get_distribution_set_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'distribution_set_type_id' in params:
            path_params['distributionSetTypeId'] = params['distribution_set_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsettypes/{distributionSetTypeId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MgmtDistributionSetType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_distribution_set_types(self, **kwargs):  # noqa: E501
        """Return all Distribution Set Types  # noqa: E501

        Handles the GET request of retrieving all distribution set types. Required Permission: READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_distribution_set_types(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str offset: The paging offset (default is 0)
        :param str limit: The maximum number of entries in a page (default is 50)
        :param str sort: The query parameter sort allows to define the sort order for the result of a query. A sort criteria consists of the name of a field and the sort direction (ASC for ascending and DESC descending). The sequence of the sort criteria (multiple can be used) defines the sort order of the entities in the result.
        :param str q: Query fields based on the Feed Item Query Language (FIQL). See Entity Definitions for available fields.
        :return: PagedListMgmtDistributionSetType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_distribution_set_types_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_distribution_set_types_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_distribution_set_types_with_http_info(self, **kwargs):  # noqa: E501
        """Return all Distribution Set Types  # noqa: E501

        Handles the GET request of retrieving all distribution set types. Required Permission: READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_distribution_set_types_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str offset: The paging offset (default is 0)
        :param str limit: The maximum number of entries in a page (default is 50)
        :param str sort: The query parameter sort allows to define the sort order for the result of a query. A sort criteria consists of the name of a field and the sort direction (ASC for ascending and DESC descending). The sequence of the sort criteria (multiple can be used) defines the sort order of the entities in the result.
        :param str q: Query fields based on the Feed Item Query Language (FIQL). See Entity Definitions for available fields.
        :return: PagedListMgmtDistributionSetType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_distribution_set_types" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsettypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedListMgmtDistributionSetType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_mandatory_module(self, distribution_set_type_id, software_module_type_id, **kwargs):  # noqa: E501
        """Return single mandatory Software Module Type in a Distribution Set Type  # noqa: E501

        Handles the GET request of retrieving the single mandatory software module type in that distribution set type. Required Permission: READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mandatory_module(distribution_set_type_id, software_module_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_type_id: (required)
        :param int software_module_type_id: (required)
        :return: MgmtSoftwareModuleType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_mandatory_module_with_http_info(distribution_set_type_id, software_module_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_mandatory_module_with_http_info(distribution_set_type_id, software_module_type_id, **kwargs)  # noqa: E501
            return data

    def get_mandatory_module_with_http_info(self, distribution_set_type_id, software_module_type_id, **kwargs):  # noqa: E501
        """Return single mandatory Software Module Type in a Distribution Set Type  # noqa: E501

        Handles the GET request of retrieving the single mandatory software module type in that distribution set type. Required Permission: READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mandatory_module_with_http_info(distribution_set_type_id, software_module_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_type_id: (required)
        :param int software_module_type_id: (required)
        :return: MgmtSoftwareModuleType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['distribution_set_type_id', 'software_module_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mandatory_module" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'distribution_set_type_id' is set
        if ('distribution_set_type_id' not in params or
                params['distribution_set_type_id'] is None):
            raise ValueError("Missing the required parameter `distribution_set_type_id` when calling `get_mandatory_module`")  # noqa: E501
        # verify the required parameter 'software_module_type_id' is set
        if ('software_module_type_id' not in params or
                params['software_module_type_id'] is None):
            raise ValueError("Missing the required parameter `software_module_type_id` when calling `get_mandatory_module`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'distribution_set_type_id' in params:
            path_params['distributionSetTypeId'] = params['distribution_set_type_id']  # noqa: E501
        if 'software_module_type_id' in params:
            path_params['softwareModuleTypeId'] = params['software_module_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsettypes/{distributionSetTypeId}/mandatorymoduletypes/{softwareModuleTypeId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MgmtSoftwareModuleType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_mandatory_modules(self, distribution_set_type_id, **kwargs):  # noqa: E501
        """Return mandatory Software Module Types in a Distribution Set Type  # noqa: E501

        Handles the GET request of retrieving the list of mandatory software module types in that distribution set type. Required Permission: READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mandatory_modules(distribution_set_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_type_id: (required)
        :return: list[MgmtSoftwareModuleType]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_mandatory_modules_with_http_info(distribution_set_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_mandatory_modules_with_http_info(distribution_set_type_id, **kwargs)  # noqa: E501
            return data

    def get_mandatory_modules_with_http_info(self, distribution_set_type_id, **kwargs):  # noqa: E501
        """Return mandatory Software Module Types in a Distribution Set Type  # noqa: E501

        Handles the GET request of retrieving the list of mandatory software module types in that distribution set type. Required Permission: READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mandatory_modules_with_http_info(distribution_set_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_type_id: (required)
        :return: list[MgmtSoftwareModuleType]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['distribution_set_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mandatory_modules" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'distribution_set_type_id' is set
        if ('distribution_set_type_id' not in params or
                params['distribution_set_type_id'] is None):
            raise ValueError("Missing the required parameter `distribution_set_type_id` when calling `get_mandatory_modules`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'distribution_set_type_id' in params:
            path_params['distributionSetTypeId'] = params['distribution_set_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsettypes/{distributionSetTypeId}/mandatorymoduletypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MgmtSoftwareModuleType]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_optional_module(self, distribution_set_type_id, software_module_type_id, **kwargs):  # noqa: E501
        """Return single optional Software Module Type in a Distribution Set Type  # noqa: E501

        Handles the GET request of retrieving the single optional software module type in that distribution set type. Required Permission: READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_optional_module(distribution_set_type_id, software_module_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_type_id: (required)
        :param int software_module_type_id: (required)
        :return: MgmtSoftwareModuleType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_optional_module_with_http_info(distribution_set_type_id, software_module_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_optional_module_with_http_info(distribution_set_type_id, software_module_type_id, **kwargs)  # noqa: E501
            return data

    def get_optional_module_with_http_info(self, distribution_set_type_id, software_module_type_id, **kwargs):  # noqa: E501
        """Return single optional Software Module Type in a Distribution Set Type  # noqa: E501

        Handles the GET request of retrieving the single optional software module type in that distribution set type. Required Permission: READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_optional_module_with_http_info(distribution_set_type_id, software_module_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_type_id: (required)
        :param int software_module_type_id: (required)
        :return: MgmtSoftwareModuleType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['distribution_set_type_id', 'software_module_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_optional_module" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'distribution_set_type_id' is set
        if ('distribution_set_type_id' not in params or
                params['distribution_set_type_id'] is None):
            raise ValueError("Missing the required parameter `distribution_set_type_id` when calling `get_optional_module`")  # noqa: E501
        # verify the required parameter 'software_module_type_id' is set
        if ('software_module_type_id' not in params or
                params['software_module_type_id'] is None):
            raise ValueError("Missing the required parameter `software_module_type_id` when calling `get_optional_module`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'distribution_set_type_id' in params:
            path_params['distributionSetTypeId'] = params['distribution_set_type_id']  # noqa: E501
        if 'software_module_type_id' in params:
            path_params['softwareModuleTypeId'] = params['software_module_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsettypes/{distributionSetTypeId}/optionalmoduletypes/{softwareModuleTypeId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MgmtSoftwareModuleType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_optional_modules(self, distribution_set_type_id, **kwargs):  # noqa: E501
        """Return optional Software Module Types in a Distribution Set Type  # noqa: E501

        Handles the GET request of retrieving the list of optional software module types in that distribution set type. Required Permission: READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_optional_modules(distribution_set_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_type_id: (required)
        :return: list[MgmtSoftwareModuleType]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_optional_modules_with_http_info(distribution_set_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_optional_modules_with_http_info(distribution_set_type_id, **kwargs)  # noqa: E501
            return data

    def get_optional_modules_with_http_info(self, distribution_set_type_id, **kwargs):  # noqa: E501
        """Return optional Software Module Types in a Distribution Set Type  # noqa: E501

        Handles the GET request of retrieving the list of optional software module types in that distribution set type. Required Permission: READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_optional_modules_with_http_info(distribution_set_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_type_id: (required)
        :return: list[MgmtSoftwareModuleType]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['distribution_set_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_optional_modules" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'distribution_set_type_id' is set
        if ('distribution_set_type_id' not in params or
                params['distribution_set_type_id'] is None):
            raise ValueError("Missing the required parameter `distribution_set_type_id` when calling `get_optional_modules`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'distribution_set_type_id' in params:
            path_params['distributionSetTypeId'] = params['distribution_set_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsettypes/{distributionSetTypeId}/optionalmoduletypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MgmtSoftwareModuleType]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_mandatory_module(self, distribution_set_type_id, software_module_type_id, **kwargs):  # noqa: E501
        """Delete a mandatory module from a Distribution Set Type  # noqa: E501

        Handles the DELETE request for removing a software module type from a single distribution set type. Required Permission: DELETE_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_mandatory_module(distribution_set_type_id, software_module_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_type_id: (required)
        :param int software_module_type_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_mandatory_module_with_http_info(distribution_set_type_id, software_module_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_mandatory_module_with_http_info(distribution_set_type_id, software_module_type_id, **kwargs)  # noqa: E501
            return data

    def remove_mandatory_module_with_http_info(self, distribution_set_type_id, software_module_type_id, **kwargs):  # noqa: E501
        """Delete a mandatory module from a Distribution Set Type  # noqa: E501

        Handles the DELETE request for removing a software module type from a single distribution set type. Required Permission: DELETE_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_mandatory_module_with_http_info(distribution_set_type_id, software_module_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_type_id: (required)
        :param int software_module_type_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['distribution_set_type_id', 'software_module_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_mandatory_module" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'distribution_set_type_id' is set
        if ('distribution_set_type_id' not in params or
                params['distribution_set_type_id'] is None):
            raise ValueError("Missing the required parameter `distribution_set_type_id` when calling `remove_mandatory_module`")  # noqa: E501
        # verify the required parameter 'software_module_type_id' is set
        if ('software_module_type_id' not in params or
                params['software_module_type_id'] is None):
            raise ValueError("Missing the required parameter `software_module_type_id` when calling `remove_mandatory_module`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'distribution_set_type_id' in params:
            path_params['distributionSetTypeId'] = params['distribution_set_type_id']  # noqa: E501
        if 'software_module_type_id' in params:
            path_params['softwareModuleTypeId'] = params['software_module_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsettypes/{distributionSetTypeId}/mandatorymoduletypes/{softwareModuleTypeId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_optional_module(self, distribution_set_type_id, software_module_type_id, **kwargs):  # noqa: E501
        """Delete an optional module from a Distribution Set Type  # noqa: E501

        Handles DELETE request for removing an optional module from the distribution set type. Note that a DS type cannot be changed after it has been used by a DS. Required Permission: UPDATE_REPOSITORY and READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_optional_module(distribution_set_type_id, software_module_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_type_id: (required)
        :param int software_module_type_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_optional_module_with_http_info(distribution_set_type_id, software_module_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_optional_module_with_http_info(distribution_set_type_id, software_module_type_id, **kwargs)  # noqa: E501
            return data

    def remove_optional_module_with_http_info(self, distribution_set_type_id, software_module_type_id, **kwargs):  # noqa: E501
        """Delete an optional module from a Distribution Set Type  # noqa: E501

        Handles DELETE request for removing an optional module from the distribution set type. Note that a DS type cannot be changed after it has been used by a DS. Required Permission: UPDATE_REPOSITORY and READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_optional_module_with_http_info(distribution_set_type_id, software_module_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_type_id: (required)
        :param int software_module_type_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['distribution_set_type_id', 'software_module_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_optional_module" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'distribution_set_type_id' is set
        if ('distribution_set_type_id' not in params or
                params['distribution_set_type_id'] is None):
            raise ValueError("Missing the required parameter `distribution_set_type_id` when calling `remove_optional_module`")  # noqa: E501
        # verify the required parameter 'software_module_type_id' is set
        if ('software_module_type_id' not in params or
                params['software_module_type_id'] is None):
            raise ValueError("Missing the required parameter `software_module_type_id` when calling `remove_optional_module`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'distribution_set_type_id' in params:
            path_params['distributionSetTypeId'] = params['distribution_set_type_id']  # noqa: E501
        if 'software_module_type_id' in params:
            path_params['softwareModuleTypeId'] = params['software_module_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsettypes/{distributionSetTypeId}/optionalmoduletypes/{softwareModuleTypeId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_distribution_set_type(self, body, distribution_set_type_id, **kwargs):  # noqa: E501
        """Update Distribution Set Type  # noqa: E501

        Handles the PUT request for a single distribution set type. Required Permission: UPDATE_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_distribution_set_type(body, distribution_set_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MgmtDistributionSetTypeRequestBodyPut body: (required)
        :param int distribution_set_type_id: (required)
        :return: MgmtDistributionSetType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_distribution_set_type_with_http_info(body, distribution_set_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_distribution_set_type_with_http_info(body, distribution_set_type_id, **kwargs)  # noqa: E501
            return data

    def update_distribution_set_type_with_http_info(self, body, distribution_set_type_id, **kwargs):  # noqa: E501
        """Update Distribution Set Type  # noqa: E501

        Handles the PUT request for a single distribution set type. Required Permission: UPDATE_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_distribution_set_type_with_http_info(body, distribution_set_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MgmtDistributionSetTypeRequestBodyPut body: (required)
        :param int distribution_set_type_id: (required)
        :return: MgmtDistributionSetType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'distribution_set_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_distribution_set_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_distribution_set_type`")  # noqa: E501
        # verify the required parameter 'distribution_set_type_id' is set
        if ('distribution_set_type_id' not in params or
                params['distribution_set_type_id'] is None):
            raise ValueError("Missing the required parameter `distribution_set_type_id` when calling `update_distribution_set_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'distribution_set_type_id' in params:
            path_params['distributionSetTypeId'] = params['distribution_set_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsettypes/{distributionSetTypeId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MgmtDistributionSetType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
