# coding: utf-8

"""
    hawkBit REST APIs

    Eclipse hawkBitâ„¢ is a domain-independent back-end framework for rolling out software updates to constrained edge devices as well as more powerful controllers and gateways connected to IP based networking infrastructure.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DownloadArtifactApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def download_artifact1(self, software_module_id, artifact_id, **kwargs):  # noqa: E501
        """download_artifact1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_artifact1(software_module_id, artifact_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int software_module_id: (required)
        :param int artifact_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_artifact1_with_http_info(software_module_id, artifact_id, **kwargs)  # noqa: E501
        else:
            (data) = self.download_artifact1_with_http_info(software_module_id, artifact_id, **kwargs)  # noqa: E501
            return data

    def download_artifact1_with_http_info(self, software_module_id, artifact_id, **kwargs):  # noqa: E501
        """download_artifact1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_artifact1_with_http_info(software_module_id, artifact_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int software_module_id: (required)
        :param int artifact_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['software_module_id', 'artifact_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_artifact1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'software_module_id' is set
        if ('software_module_id' not in params or
                params['software_module_id'] is None):
            raise ValueError("Missing the required parameter `software_module_id` when calling `download_artifact1`")  # noqa: E501
        # verify the required parameter 'artifact_id' is set
        if ('artifact_id' not in params or
                params['artifact_id'] is None):
            raise ValueError("Missing the required parameter `artifact_id` when calling `download_artifact1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'software_module_id' in params:
            path_params['softwareModuleId'] = params['software_module_id']  # noqa: E501
        if 'artifact_id' in params:
            path_params['artifactId'] = params['artifact_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/softwaremodules/{softwareModuleId}/artifacts/{artifactId}/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
