# coding: utf-8

"""
    hawkBit REST APIs

    Eclipse hawkBitâ„¢ is a domain-independent back-end framework for rolling out software updates to constrained edge devices as well as more powerful controllers and gateways connected to IP based networking infrastructure.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class RolloutsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def approve(self, rollout_id, **kwargs):  # noqa: E501
        """Approve a Rollout  # noqa: E501

        Handles the POST request of approving a created rollout. Only possible if approval workflow is enabled in system configuration and rollout is in state WAITING_FOR_APPROVAL. Required Permission: APPROVE_ROLLOUT  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.approve(rollout_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rollout_id: (required)
        :param str remark:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.approve_with_http_info(rollout_id, **kwargs)  # noqa: E501
        else:
            (data) = self.approve_with_http_info(rollout_id, **kwargs)  # noqa: E501
            return data

    def approve_with_http_info(self, rollout_id, **kwargs):  # noqa: E501
        """Approve a Rollout  # noqa: E501

        Handles the POST request of approving a created rollout. Only possible if approval workflow is enabled in system configuration and rollout is in state WAITING_FOR_APPROVAL. Required Permission: APPROVE_ROLLOUT  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.approve_with_http_info(rollout_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rollout_id: (required)
        :param str remark:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rollout_id', 'remark']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method approve" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rollout_id' is set
        if ('rollout_id' not in params or
                params['rollout_id'] is None):
            raise ValueError("Missing the required parameter `rollout_id` when calling `approve`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rollout_id' in params:
            path_params['rolloutId'] = params['rollout_id']  # noqa: E501

        query_params = []
        if 'remark' in params:
            query_params.append(('remark', params['remark']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/rollouts/{rolloutId}/approve', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create(self, body, **kwargs):  # noqa: E501
        """Create a new Rollout  # noqa: E501

        Handles the POST request of creating new rollout. Required Permission: CREATE_ROLLOUT  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MgmtRolloutRestRequestBodyPost body: (required)
        :return: MgmtRolloutResponseBody
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a new Rollout  # noqa: E501

        Handles the POST request of creating new rollout. Required Permission: CREATE_ROLLOUT  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MgmtRolloutRestRequestBodyPost body: (required)
        :return: MgmtRolloutResponseBody
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/rollouts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MgmtRolloutResponseBody',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete(self, rollout_id, **kwargs):  # noqa: E501
        """Delete a Rollout  # noqa: E501

        Handles the DELETE request of deleting a rollout. Required Permission: DELETE_ROLLOUT  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete(rollout_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rollout_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_with_http_info(rollout_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_with_http_info(rollout_id, **kwargs)  # noqa: E501
            return data

    def delete_with_http_info(self, rollout_id, **kwargs):  # noqa: E501
        """Delete a Rollout  # noqa: E501

        Handles the DELETE request of deleting a rollout. Required Permission: DELETE_ROLLOUT  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_with_http_info(rollout_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rollout_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rollout_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rollout_id' is set
        if ('rollout_id' not in params or
                params['rollout_id'] is None):
            raise ValueError("Missing the required parameter `rollout_id` when calling `delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rollout_id' in params:
            path_params['rolloutId'] = params['rollout_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/rollouts/{rolloutId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def deny(self, rollout_id, **kwargs):  # noqa: E501
        """Deny a Rollout  # noqa: E501

        Handles the POST request of denying a created rollout. Only possible if approval workflow is enabled in system configuration and rollout is in state WAITING_FOR_APPROVAL. Required Permission: APPROVE_ROLLOUT  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deny(rollout_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rollout_id: (required)
        :param str remark:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.deny_with_http_info(rollout_id, **kwargs)  # noqa: E501
        else:
            (data) = self.deny_with_http_info(rollout_id, **kwargs)  # noqa: E501
            return data

    def deny_with_http_info(self, rollout_id, **kwargs):  # noqa: E501
        """Deny a Rollout  # noqa: E501

        Handles the POST request of denying a created rollout. Only possible if approval workflow is enabled in system configuration and rollout is in state WAITING_FOR_APPROVAL. Required Permission: APPROVE_ROLLOUT  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deny_with_http_info(rollout_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rollout_id: (required)
        :param str remark:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rollout_id', 'remark']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deny" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rollout_id' is set
        if ('rollout_id' not in params or
                params['rollout_id'] is None):
            raise ValueError("Missing the required parameter `rollout_id` when calling `deny`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rollout_id' in params:
            path_params['rolloutId'] = params['rollout_id']  # noqa: E501

        query_params = []
        if 'remark' in params:
            query_params.append(('remark', params['remark']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/rollouts/{rolloutId}/deny', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_rollout(self, rollout_id, **kwargs):  # noqa: E501
        """Return single Rollout  # noqa: E501

        Handles the GET request of retrieving a single rollout. Required Permission: READ_ROLLOUT  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rollout(rollout_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rollout_id: (required)
        :return: MgmtRolloutResponseBody
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_rollout_with_http_info(rollout_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_rollout_with_http_info(rollout_id, **kwargs)  # noqa: E501
            return data

    def get_rollout_with_http_info(self, rollout_id, **kwargs):  # noqa: E501
        """Return single Rollout  # noqa: E501

        Handles the GET request of retrieving a single rollout. Required Permission: READ_ROLLOUT  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rollout_with_http_info(rollout_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rollout_id: (required)
        :return: MgmtRolloutResponseBody
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rollout_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_rollout" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rollout_id' is set
        if ('rollout_id' not in params or
                params['rollout_id'] is None):
            raise ValueError("Missing the required parameter `rollout_id` when calling `get_rollout`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rollout_id' in params:
            path_params['rolloutId'] = params['rollout_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/rollouts/{rolloutId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MgmtRolloutResponseBody',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_rollout_group(self, rollout_id, group_id, **kwargs):  # noqa: E501
        """Return single rollout group  # noqa: E501

        Handles the GET request of a single deploy group of a specific rollout. Required Permission: READ_ROLLOUT  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rollout_group(rollout_id, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rollout_id: (required)
        :param int group_id: (required)
        :return: MgmtRolloutGroupResponseBody
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_rollout_group_with_http_info(rollout_id, group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_rollout_group_with_http_info(rollout_id, group_id, **kwargs)  # noqa: E501
            return data

    def get_rollout_group_with_http_info(self, rollout_id, group_id, **kwargs):  # noqa: E501
        """Return single rollout group  # noqa: E501

        Handles the GET request of a single deploy group of a specific rollout. Required Permission: READ_ROLLOUT  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rollout_group_with_http_info(rollout_id, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rollout_id: (required)
        :param int group_id: (required)
        :return: MgmtRolloutGroupResponseBody
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rollout_id', 'group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_rollout_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rollout_id' is set
        if ('rollout_id' not in params or
                params['rollout_id'] is None):
            raise ValueError("Missing the required parameter `rollout_id` when calling `get_rollout_group`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_rollout_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rollout_id' in params:
            path_params['rolloutId'] = params['rollout_id']  # noqa: E501
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/rollouts/{rolloutId}/deploygroups/{groupId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MgmtRolloutGroupResponseBody',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_rollout_group_targets(self, rollout_id, group_id, **kwargs):  # noqa: E501
        """Return all targets related to a specific rollout group  # noqa: E501

        Handles the GET request of retrieving all targets of a single deploy group of a specific rollout. Required Permissions: READ_ROLLOUT, READ_TARGET.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rollout_group_targets(rollout_id, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rollout_id: (required)
        :param int group_id: (required)
        :param str offset: The paging offset (default is 0)
        :param str limit: The maximum number of entries in a page (default is 50)
        :param str sort: The query parameter sort allows to define the sort order for the result of a query. A sort criteria consists of the name of a field and the sort direction (ASC for ascending and DESC descending). The sequence of the sort criteria (multiple can be used) defines the sort order of the entities in the result.
        :param str q: Query fields based on the Feed Item Query Language (FIQL). See Entity Definitions for available fields.
        :return: PagedListMgmtTarget
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_rollout_group_targets_with_http_info(rollout_id, group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_rollout_group_targets_with_http_info(rollout_id, group_id, **kwargs)  # noqa: E501
            return data

    def get_rollout_group_targets_with_http_info(self, rollout_id, group_id, **kwargs):  # noqa: E501
        """Return all targets related to a specific rollout group  # noqa: E501

        Handles the GET request of retrieving all targets of a single deploy group of a specific rollout. Required Permissions: READ_ROLLOUT, READ_TARGET.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rollout_group_targets_with_http_info(rollout_id, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rollout_id: (required)
        :param int group_id: (required)
        :param str offset: The paging offset (default is 0)
        :param str limit: The maximum number of entries in a page (default is 50)
        :param str sort: The query parameter sort allows to define the sort order for the result of a query. A sort criteria consists of the name of a field and the sort direction (ASC for ascending and DESC descending). The sequence of the sort criteria (multiple can be used) defines the sort order of the entities in the result.
        :param str q: Query fields based on the Feed Item Query Language (FIQL). See Entity Definitions for available fields.
        :return: PagedListMgmtTarget
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rollout_id', 'group_id', 'offset', 'limit', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_rollout_group_targets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rollout_id' is set
        if ('rollout_id' not in params or
                params['rollout_id'] is None):
            raise ValueError("Missing the required parameter `rollout_id` when calling `get_rollout_group_targets`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_rollout_group_targets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rollout_id' in params:
            path_params['rolloutId'] = params['rollout_id']  # noqa: E501
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/rollouts/{rolloutId}/deploygroups/{groupId}/targets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedListMgmtTarget',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_rollout_groups(self, rollout_id, **kwargs):  # noqa: E501
        """Return all rollout groups referred to a Rollout  # noqa: E501

        Handles the GET request of retrieving all deploy groups of a specific rollout. Required Permission: READ_ROLLOUT  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rollout_groups(rollout_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rollout_id: (required)
        :param str offset: The paging offset (default is 0)
        :param str limit: The maximum number of entries in a page (default is 50)
        :param str sort: The query parameter sort allows to define the sort order for the result of a query. A sort criteria consists of the name of a field and the sort direction (ASC for ascending and DESC descending). The sequence of the sort criteria (multiple can be used) defines the sort order of the entities in the result.
        :param str q: Query fields based on the Feed Item Query Language (FIQL). See Entity Definitions for available fields.
        :param str representation:
        :return: PagedListMgmtRolloutGroupResponseBody
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_rollout_groups_with_http_info(rollout_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_rollout_groups_with_http_info(rollout_id, **kwargs)  # noqa: E501
            return data

    def get_rollout_groups_with_http_info(self, rollout_id, **kwargs):  # noqa: E501
        """Return all rollout groups referred to a Rollout  # noqa: E501

        Handles the GET request of retrieving all deploy groups of a specific rollout. Required Permission: READ_ROLLOUT  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rollout_groups_with_http_info(rollout_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rollout_id: (required)
        :param str offset: The paging offset (default is 0)
        :param str limit: The maximum number of entries in a page (default is 50)
        :param str sort: The query parameter sort allows to define the sort order for the result of a query. A sort criteria consists of the name of a field and the sort direction (ASC for ascending and DESC descending). The sequence of the sort criteria (multiple can be used) defines the sort order of the entities in the result.
        :param str q: Query fields based on the Feed Item Query Language (FIQL). See Entity Definitions for available fields.
        :param str representation:
        :return: PagedListMgmtRolloutGroupResponseBody
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rollout_id', 'offset', 'limit', 'sort', 'q', 'representation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_rollout_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rollout_id' is set
        if ('rollout_id' not in params or
                params['rollout_id'] is None):
            raise ValueError("Missing the required parameter `rollout_id` when calling `get_rollout_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rollout_id' in params:
            path_params['rolloutId'] = params['rollout_id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'representation' in params:
            query_params.append(('representation', params['representation']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/rollouts/{rolloutId}/deploygroups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedListMgmtRolloutGroupResponseBody',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_rollouts(self, **kwargs):  # noqa: E501
        """Return all Rollouts  # noqa: E501

        Handles the GET request of retrieving all rollouts. Required Permission: READ_ROLLOUT  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rollouts(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str offset: The paging offset (default is 0)
        :param str limit: The maximum number of entries in a page (default is 50)
        :param str sort: The query parameter sort allows to define the sort order for the result of a query. A sort criteria consists of the name of a field and the sort direction (ASC for ascending and DESC descending). The sequence of the sort criteria (multiple can be used) defines the sort order of the entities in the result.
        :param str q: Query fields based on the Feed Item Query Language (FIQL). See Entity Definitions for available fields.
        :param str representation:
        :return: PagedListMgmtRolloutResponseBody
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_rollouts_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_rollouts_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_rollouts_with_http_info(self, **kwargs):  # noqa: E501
        """Return all Rollouts  # noqa: E501

        Handles the GET request of retrieving all rollouts. Required Permission: READ_ROLLOUT  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rollouts_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str offset: The paging offset (default is 0)
        :param str limit: The maximum number of entries in a page (default is 50)
        :param str sort: The query parameter sort allows to define the sort order for the result of a query. A sort criteria consists of the name of a field and the sort direction (ASC for ascending and DESC descending). The sequence of the sort criteria (multiple can be used) defines the sort order of the entities in the result.
        :param str q: Query fields based on the Feed Item Query Language (FIQL). See Entity Definitions for available fields.
        :param str representation:
        :return: PagedListMgmtRolloutResponseBody
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'sort', 'q', 'representation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_rollouts" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'representation' in params:
            query_params.append(('representation', params['representation']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/rollouts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedListMgmtRolloutResponseBody',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pause(self, rollout_id, **kwargs):  # noqa: E501
        """Pause a Rollout  # noqa: E501

        Handles the POST request of pausing a running rollout. Required Permission: HANDLE_ROLLOUT  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pause(rollout_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rollout_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pause_with_http_info(rollout_id, **kwargs)  # noqa: E501
        else:
            (data) = self.pause_with_http_info(rollout_id, **kwargs)  # noqa: E501
            return data

    def pause_with_http_info(self, rollout_id, **kwargs):  # noqa: E501
        """Pause a Rollout  # noqa: E501

        Handles the POST request of pausing a running rollout. Required Permission: HANDLE_ROLLOUT  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pause_with_http_info(rollout_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rollout_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rollout_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pause" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rollout_id' is set
        if ('rollout_id' not in params or
                params['rollout_id'] is None):
            raise ValueError("Missing the required parameter `rollout_id` when calling `pause`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rollout_id' in params:
            path_params['rolloutId'] = params['rollout_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/rollouts/{rolloutId}/pause', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resume(self, rollout_id, **kwargs):  # noqa: E501
        """Resume a Rollout  # noqa: E501

        Handles the POST request of resuming a paused rollout. Required Permission: HANDLE_ROLLOUT  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resume(rollout_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rollout_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resume_with_http_info(rollout_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resume_with_http_info(rollout_id, **kwargs)  # noqa: E501
            return data

    def resume_with_http_info(self, rollout_id, **kwargs):  # noqa: E501
        """Resume a Rollout  # noqa: E501

        Handles the POST request of resuming a paused rollout. Required Permission: HANDLE_ROLLOUT  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resume_with_http_info(rollout_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rollout_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rollout_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resume" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rollout_id' is set
        if ('rollout_id' not in params or
                params['rollout_id'] is None):
            raise ValueError("Missing the required parameter `rollout_id` when calling `resume`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rollout_id' in params:
            path_params['rolloutId'] = params['rollout_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/rollouts/{rolloutId}/resume', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retry_rollout(self, rollout_id, **kwargs):  # noqa: E501
        """Retry a rollout  # noqa: E501

        Handles the POST request of retrying a rollout. Required Permission: CREATE_ROLLOUT  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retry_rollout(rollout_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rollout_id: (required)
        :return: MgmtRolloutResponseBody
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retry_rollout_with_http_info(rollout_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retry_rollout_with_http_info(rollout_id, **kwargs)  # noqa: E501
            return data

    def retry_rollout_with_http_info(self, rollout_id, **kwargs):  # noqa: E501
        """Retry a rollout  # noqa: E501

        Handles the POST request of retrying a rollout. Required Permission: CREATE_ROLLOUT  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retry_rollout_with_http_info(rollout_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rollout_id: (required)
        :return: MgmtRolloutResponseBody
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rollout_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retry_rollout" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rollout_id' is set
        if ('rollout_id' not in params or
                params['rollout_id'] is None):
            raise ValueError("Missing the required parameter `rollout_id` when calling `retry_rollout`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rollout_id' in params:
            path_params['rolloutId'] = params['rollout_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/rollouts/{rolloutId}/retry', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MgmtRolloutResponseBody',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def start(self, rollout_id, **kwargs):  # noqa: E501
        """Start a Rollout  # noqa: E501

        Handles the POST request of starting a created rollout. Required Permission: HANDLE_ROLLOUT  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start(rollout_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rollout_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.start_with_http_info(rollout_id, **kwargs)  # noqa: E501
        else:
            (data) = self.start_with_http_info(rollout_id, **kwargs)  # noqa: E501
            return data

    def start_with_http_info(self, rollout_id, **kwargs):  # noqa: E501
        """Start a Rollout  # noqa: E501

        Handles the POST request of starting a created rollout. Required Permission: HANDLE_ROLLOUT  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_with_http_info(rollout_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rollout_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rollout_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rollout_id' is set
        if ('rollout_id' not in params or
                params['rollout_id'] is None):
            raise ValueError("Missing the required parameter `rollout_id` when calling `start`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rollout_id' in params:
            path_params['rolloutId'] = params['rollout_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/rollouts/{rolloutId}/start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def trigger_next_group(self, rollout_id, **kwargs):  # noqa: E501
        """Force trigger processing next group of a Rollout  # noqa: E501

        Handles the POST request of triggering the next group of a rollout. Required Permission: UPDATE_ROLLOUT  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trigger_next_group(rollout_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rollout_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.trigger_next_group_with_http_info(rollout_id, **kwargs)  # noqa: E501
        else:
            (data) = self.trigger_next_group_with_http_info(rollout_id, **kwargs)  # noqa: E501
            return data

    def trigger_next_group_with_http_info(self, rollout_id, **kwargs):  # noqa: E501
        """Force trigger processing next group of a Rollout  # noqa: E501

        Handles the POST request of triggering the next group of a rollout. Required Permission: UPDATE_ROLLOUT  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trigger_next_group_with_http_info(rollout_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rollout_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rollout_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method trigger_next_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rollout_id' is set
        if ('rollout_id' not in params or
                params['rollout_id'] is None):
            raise ValueError("Missing the required parameter `rollout_id` when calling `trigger_next_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rollout_id' in params:
            path_params['rolloutId'] = params['rollout_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/rollouts/{rolloutId}/triggerNextGroup', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update(self, body, rollout_id, **kwargs):  # noqa: E501
        """Update Rollout  # noqa: E501

        Handles the UPDATE request for a single Rollout. Required permission: UPDATE_ROLLOUT  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update(body, rollout_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MgmtRolloutRestRequestBodyPut body: (required)
        :param int rollout_id: (required)
        :return: MgmtRolloutResponseBody
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_with_http_info(body, rollout_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_with_http_info(body, rollout_id, **kwargs)  # noqa: E501
            return data

    def update_with_http_info(self, body, rollout_id, **kwargs):  # noqa: E501
        """Update Rollout  # noqa: E501

        Handles the UPDATE request for a single Rollout. Required permission: UPDATE_ROLLOUT  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_with_http_info(body, rollout_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MgmtRolloutRestRequestBodyPut body: (required)
        :param int rollout_id: (required)
        :return: MgmtRolloutResponseBody
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'rollout_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update`")  # noqa: E501
        # verify the required parameter 'rollout_id' is set
        if ('rollout_id' not in params or
                params['rollout_id'] is None):
            raise ValueError("Missing the required parameter `rollout_id` when calling `update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rollout_id' in params:
            path_params['rolloutId'] = params['rollout_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/rollouts/{rolloutId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MgmtRolloutResponseBody',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
