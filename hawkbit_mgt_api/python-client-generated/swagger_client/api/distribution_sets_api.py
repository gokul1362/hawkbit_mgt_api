# coding: utf-8

"""
    hawkBit REST APIs

    Eclipse hawkBitâ„¢ is a domain-independent back-end framework for rolling out software updates to constrained edge devices as well as more powerful controllers and gateways connected to IP based networking infrastructure.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DistributionSetsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def assign_software_modules(self, body, distribution_set_id, **kwargs):  # noqa: E501
        """Assign a list of software modules to a distribution set  # noqa: E501

        Handles the POST request for assigning multiple software modules to a distribution set.The request body must always be a list of software module IDs. Required permissions: READ_REPOSITORY and UPDATE_REPOSITORY   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_software_modules(body, distribution_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[MgmtSoftwareModuleAssigment] body: (required)
        :param int distribution_set_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assign_software_modules_with_http_info(body, distribution_set_id, **kwargs)  # noqa: E501
        else:
            (data) = self.assign_software_modules_with_http_info(body, distribution_set_id, **kwargs)  # noqa: E501
            return data

    def assign_software_modules_with_http_info(self, body, distribution_set_id, **kwargs):  # noqa: E501
        """Assign a list of software modules to a distribution set  # noqa: E501

        Handles the POST request for assigning multiple software modules to a distribution set.The request body must always be a list of software module IDs. Required permissions: READ_REPOSITORY and UPDATE_REPOSITORY   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_software_modules_with_http_info(body, distribution_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[MgmtSoftwareModuleAssigment] body: (required)
        :param int distribution_set_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'distribution_set_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_software_modules" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `assign_software_modules`")  # noqa: E501
        # verify the required parameter 'distribution_set_id' is set
        if ('distribution_set_id' not in params or
                params['distribution_set_id'] is None):
            raise ValueError("Missing the required parameter `distribution_set_id` when calling `assign_software_modules`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'distribution_set_id' in params:
            path_params['distributionSetId'] = params['distribution_set_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsets/{distributionSetId}/assignedSM', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_assigned_target(self, body, distribution_set_id, **kwargs):  # noqa: E501
        """Assigning multiple targets to a single distribution set  # noqa: E501

        Handles the POST request for assigning multiple targets to a distribution set.The request body must always be a list of target IDs. Non-existing targets are silently ignored resulting in a valid response. Required permissions: READ_REPOSITORY and UPDATE_TARGET  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_assigned_target(body, distribution_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[MgmtTargetAssignmentRequestBody] body: (required)
        :param int distribution_set_id: (required)
        :param bool offline:
        :return: MgmtTargetAssignmentResponseBody
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_assigned_target_with_http_info(body, distribution_set_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_assigned_target_with_http_info(body, distribution_set_id, **kwargs)  # noqa: E501
            return data

    def create_assigned_target_with_http_info(self, body, distribution_set_id, **kwargs):  # noqa: E501
        """Assigning multiple targets to a single distribution set  # noqa: E501

        Handles the POST request for assigning multiple targets to a distribution set.The request body must always be a list of target IDs. Non-existing targets are silently ignored resulting in a valid response. Required permissions: READ_REPOSITORY and UPDATE_TARGET  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_assigned_target_with_http_info(body, distribution_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[MgmtTargetAssignmentRequestBody] body: (required)
        :param int distribution_set_id: (required)
        :param bool offline:
        :return: MgmtTargetAssignmentResponseBody
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'distribution_set_id', 'offline']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_assigned_target" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_assigned_target`")  # noqa: E501
        # verify the required parameter 'distribution_set_id' is set
        if ('distribution_set_id' not in params or
                params['distribution_set_id'] is None):
            raise ValueError("Missing the required parameter `distribution_set_id` when calling `create_assigned_target`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'distribution_set_id' in params:
            path_params['distributionSetId'] = params['distribution_set_id']  # noqa: E501

        query_params = []
        if 'offline' in params:
            query_params.append(('offline', params['offline']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsets/{distributionSetId}/assignedTargets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MgmtTargetAssignmentResponseBody',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_distribution_sets(self, body, **kwargs):  # noqa: E501
        """Creates new Distribution Sets  # noqa: E501

        Handles the POST request of creating new distribution sets within Hawkbit. The request body must always be a list of sets. Required permission: CREATE_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_distribution_sets(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[MgmtDistributionSetRequestBodyPost] body: (required)
        :return: list[MgmtDistributionSet]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_distribution_sets_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_distribution_sets_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_distribution_sets_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates new Distribution Sets  # noqa: E501

        Handles the POST request of creating new distribution sets within Hawkbit. The request body must always be a list of sets. Required permission: CREATE_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_distribution_sets_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[MgmtDistributionSetRequestBodyPost] body: (required)
        :return: list[MgmtDistributionSet]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_distribution_sets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_distribution_sets`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MgmtDistributionSet]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_metadata2(self, body, distribution_set_id, **kwargs):  # noqa: E501
        """Create a list of meta data for a specific distribution set  # noqa: E501

        Create a list of meta data entries Required permissions: READ_REPOSITORY and UPDATE_TARGET  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_metadata2(body, distribution_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[MgmtMetadata] body: (required)
        :param int distribution_set_id: (required)
        :return: list[MgmtMetadata]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_metadata2_with_http_info(body, distribution_set_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_metadata2_with_http_info(body, distribution_set_id, **kwargs)  # noqa: E501
            return data

    def create_metadata2_with_http_info(self, body, distribution_set_id, **kwargs):  # noqa: E501
        """Create a list of meta data for a specific distribution set  # noqa: E501

        Create a list of meta data entries Required permissions: READ_REPOSITORY and UPDATE_TARGET  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_metadata2_with_http_info(body, distribution_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[MgmtMetadata] body: (required)
        :param int distribution_set_id: (required)
        :return: list[MgmtMetadata]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'distribution_set_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_metadata2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_metadata2`")  # noqa: E501
        # verify the required parameter 'distribution_set_id' is set
        if ('distribution_set_id' not in params or
                params['distribution_set_id'] is None):
            raise ValueError("Missing the required parameter `distribution_set_id` when calling `create_metadata2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'distribution_set_id' in params:
            path_params['distributionSetId'] = params['distribution_set_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsets/{distributionSetId}/metadata', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MgmtMetadata]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_assign_software_modules(self, distribution_set_id, software_module_id, **kwargs):  # noqa: E501
        """Delete the assignment of the software module from the distribution set  # noqa: E501

        Delete an assignment. Required permission: UPDATE_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_assign_software_modules(distribution_set_id, software_module_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_id: (required)
        :param int software_module_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_assign_software_modules_with_http_info(distribution_set_id, software_module_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_assign_software_modules_with_http_info(distribution_set_id, software_module_id, **kwargs)  # noqa: E501
            return data

    def delete_assign_software_modules_with_http_info(self, distribution_set_id, software_module_id, **kwargs):  # noqa: E501
        """Delete the assignment of the software module from the distribution set  # noqa: E501

        Delete an assignment. Required permission: UPDATE_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_assign_software_modules_with_http_info(distribution_set_id, software_module_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_id: (required)
        :param int software_module_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['distribution_set_id', 'software_module_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_assign_software_modules" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'distribution_set_id' is set
        if ('distribution_set_id' not in params or
                params['distribution_set_id'] is None):
            raise ValueError("Missing the required parameter `distribution_set_id` when calling `delete_assign_software_modules`")  # noqa: E501
        # verify the required parameter 'software_module_id' is set
        if ('software_module_id' not in params or
                params['software_module_id'] is None):
            raise ValueError("Missing the required parameter `software_module_id` when calling `delete_assign_software_modules`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'distribution_set_id' in params:
            path_params['distributionSetId'] = params['distribution_set_id']  # noqa: E501
        if 'software_module_id' in params:
            path_params['softwareModuleId'] = params['software_module_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsets/{distributionSetId}/assignedSM/{softwareModuleId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_distribution_set(self, distribution_set_id, **kwargs):  # noqa: E501
        """Delete Distribution Set by Id  # noqa: E501

        Handles the DELETE request for a single Distribution Set. Required permission: DELETE_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_distribution_set(distribution_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_distribution_set_with_http_info(distribution_set_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_distribution_set_with_http_info(distribution_set_id, **kwargs)  # noqa: E501
            return data

    def delete_distribution_set_with_http_info(self, distribution_set_id, **kwargs):  # noqa: E501
        """Delete Distribution Set by Id  # noqa: E501

        Handles the DELETE request for a single Distribution Set. Required permission: DELETE_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_distribution_set_with_http_info(distribution_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['distribution_set_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_distribution_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'distribution_set_id' is set
        if ('distribution_set_id' not in params or
                params['distribution_set_id'] is None):
            raise ValueError("Missing the required parameter `distribution_set_id` when calling `delete_distribution_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'distribution_set_id' in params:
            path_params['distributionSetId'] = params['distribution_set_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsets/{distributionSetId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_metadata2(self, distribution_set_id, metadata_key, **kwargs):  # noqa: E501
        """Delete a single meta data entry from the distribution set  # noqa: E501

        Delete a single meta data. Required permission: UPDATE_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_metadata2(distribution_set_id, metadata_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_id: (required)
        :param str metadata_key: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_metadata2_with_http_info(distribution_set_id, metadata_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_metadata2_with_http_info(distribution_set_id, metadata_key, **kwargs)  # noqa: E501
            return data

    def delete_metadata2_with_http_info(self, distribution_set_id, metadata_key, **kwargs):  # noqa: E501
        """Delete a single meta data entry from the distribution set  # noqa: E501

        Delete a single meta data. Required permission: UPDATE_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_metadata2_with_http_info(distribution_set_id, metadata_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_id: (required)
        :param str metadata_key: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['distribution_set_id', 'metadata_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_metadata2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'distribution_set_id' is set
        if ('distribution_set_id' not in params or
                params['distribution_set_id'] is None):
            raise ValueError("Missing the required parameter `distribution_set_id` when calling `delete_metadata2`")  # noqa: E501
        # verify the required parameter 'metadata_key' is set
        if ('metadata_key' not in params or
                params['metadata_key'] is None):
            raise ValueError("Missing the required parameter `metadata_key` when calling `delete_metadata2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'distribution_set_id' in params:
            path_params['distributionSetId'] = params['distribution_set_id']  # noqa: E501
        if 'metadata_key' in params:
            path_params['metadataKey'] = params['metadata_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsets/{distributionSetId}/metadata/{metadataKey}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_actions_count_by_status_for_distribution_set(self, distribution_set_id, **kwargs):  # noqa: E501
        """Return Actions count by status for Distribution Set  # noqa: E501

        Handles the GET request of retrieving Actions count by Status for Distribution Set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_actions_count_by_status_for_distribution_set(distribution_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_id: (required)
        :return: MgmtDistributionSetStatistics
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_actions_count_by_status_for_distribution_set_with_http_info(distribution_set_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_actions_count_by_status_for_distribution_set_with_http_info(distribution_set_id, **kwargs)  # noqa: E501
            return data

    def get_actions_count_by_status_for_distribution_set_with_http_info(self, distribution_set_id, **kwargs):  # noqa: E501
        """Return Actions count by status for Distribution Set  # noqa: E501

        Handles the GET request of retrieving Actions count by Status for Distribution Set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_actions_count_by_status_for_distribution_set_with_http_info(distribution_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_id: (required)
        :return: MgmtDistributionSetStatistics
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['distribution_set_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_actions_count_by_status_for_distribution_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'distribution_set_id' is set
        if ('distribution_set_id' not in params or
                params['distribution_set_id'] is None):
            raise ValueError("Missing the required parameter `distribution_set_id` when calling `get_actions_count_by_status_for_distribution_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'distribution_set_id' in params:
            path_params['distributionSetId'] = params['distribution_set_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsets/{distributionSetId}/statistics/actions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MgmtDistributionSetStatistics',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_assigned_software_modules(self, distribution_set_id, **kwargs):  # noqa: E501
        """Return the assigned software modules of a specific distribution set  # noqa: E501

        Handles the GET request of retrieving a single distribution set. Required permission: READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_assigned_software_modules(distribution_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_id: (required)
        :param str offset: The paging offset (default is 0)
        :param str limit: The maximum number of entries in a page (default is 50)
        :param str sort: The query parameter sort allows to define the sort order for the result of a query. A sort criteria consists of the name of a field and the sort direction (ASC for ascending and DESC descending). The sequence of the sort criteria (multiple can be used) defines the sort order of the entities in the result.
        :return: PagedListMgmtSoftwareModule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_assigned_software_modules_with_http_info(distribution_set_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_assigned_software_modules_with_http_info(distribution_set_id, **kwargs)  # noqa: E501
            return data

    def get_assigned_software_modules_with_http_info(self, distribution_set_id, **kwargs):  # noqa: E501
        """Return the assigned software modules of a specific distribution set  # noqa: E501

        Handles the GET request of retrieving a single distribution set. Required permission: READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_assigned_software_modules_with_http_info(distribution_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_id: (required)
        :param str offset: The paging offset (default is 0)
        :param str limit: The maximum number of entries in a page (default is 50)
        :param str sort: The query parameter sort allows to define the sort order for the result of a query. A sort criteria consists of the name of a field and the sort direction (ASC for ascending and DESC descending). The sequence of the sort criteria (multiple can be used) defines the sort order of the entities in the result.
        :return: PagedListMgmtSoftwareModule
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['distribution_set_id', 'offset', 'limit', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_assigned_software_modules" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'distribution_set_id' is set
        if ('distribution_set_id' not in params or
                params['distribution_set_id'] is None):
            raise ValueError("Missing the required parameter `distribution_set_id` when calling `get_assigned_software_modules`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'distribution_set_id' in params:
            path_params['distributionSetId'] = params['distribution_set_id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsets/{distributionSetId}/assignedSM', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedListMgmtSoftwareModule',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_assigned_targets1(self, distribution_set_id, **kwargs):  # noqa: E501
        """Return assigned targets to a specific distribution set  # noqa: E501

        Handles the GET request for retrieving assigned targets of a single distribution set. Required permissions: READ_REPOSITORY and READ_TARGET  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_assigned_targets1(distribution_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_id: (required)
        :param str offset: The paging offset (default is 0)
        :param str limit: The maximum number of entries in a page (default is 50)
        :param str sort: The query parameter sort allows to define the sort order for the result of a query. A sort criteria consists of the name of a field and the sort direction (ASC for ascending and DESC descending). The sequence of the sort criteria (multiple can be used) defines the sort order of the entities in the result.
        :param str q: Query fields based on the Feed Item Query Language (FIQL). See Entity Definitions for available fields.
        :return: PagedListMgmtTarget
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_assigned_targets1_with_http_info(distribution_set_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_assigned_targets1_with_http_info(distribution_set_id, **kwargs)  # noqa: E501
            return data

    def get_assigned_targets1_with_http_info(self, distribution_set_id, **kwargs):  # noqa: E501
        """Return assigned targets to a specific distribution set  # noqa: E501

        Handles the GET request for retrieving assigned targets of a single distribution set. Required permissions: READ_REPOSITORY and READ_TARGET  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_assigned_targets1_with_http_info(distribution_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_id: (required)
        :param str offset: The paging offset (default is 0)
        :param str limit: The maximum number of entries in a page (default is 50)
        :param str sort: The query parameter sort allows to define the sort order for the result of a query. A sort criteria consists of the name of a field and the sort direction (ASC for ascending and DESC descending). The sequence of the sort criteria (multiple can be used) defines the sort order of the entities in the result.
        :param str q: Query fields based on the Feed Item Query Language (FIQL). See Entity Definitions for available fields.
        :return: PagedListMgmtTarget
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['distribution_set_id', 'offset', 'limit', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_assigned_targets1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'distribution_set_id' is set
        if ('distribution_set_id' not in params or
                params['distribution_set_id'] is None):
            raise ValueError("Missing the required parameter `distribution_set_id` when calling `get_assigned_targets1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'distribution_set_id' in params:
            path_params['distributionSetId'] = params['distribution_set_id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsets/{distributionSetId}/assignedTargets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedListMgmtTarget',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_auto_assign_target_filter_queries(self, distribution_set_id, **kwargs):  # noqa: E501
        """Return target filter queries that have the given distribution set as auto assign DS  # noqa: E501

        Handles the GET request for retrieving assigned target filter queries of a single distribution set. Required permissions: READ_REPOSITORY and READ_TARGET  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_auto_assign_target_filter_queries(distribution_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_id: (required)
        :param str offset: The paging offset (default is 0)
        :param str limit: The maximum number of entries in a page (default is 50)
        :param str sort: The query parameter sort allows to define the sort order for the result of a query. A sort criteria consists of the name of a field and the sort direction (ASC for ascending and DESC descending). The sequence of the sort criteria (multiple can be used) defines the sort order of the entities in the result.
        :param str q: Query fields based on the Feed Item Query Language (FIQL). See Entity Definitions for available fields.
        :return: PagedListMgmtTargetFilterQuery
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_auto_assign_target_filter_queries_with_http_info(distribution_set_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_auto_assign_target_filter_queries_with_http_info(distribution_set_id, **kwargs)  # noqa: E501
            return data

    def get_auto_assign_target_filter_queries_with_http_info(self, distribution_set_id, **kwargs):  # noqa: E501
        """Return target filter queries that have the given distribution set as auto assign DS  # noqa: E501

        Handles the GET request for retrieving assigned target filter queries of a single distribution set. Required permissions: READ_REPOSITORY and READ_TARGET  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_auto_assign_target_filter_queries_with_http_info(distribution_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_id: (required)
        :param str offset: The paging offset (default is 0)
        :param str limit: The maximum number of entries in a page (default is 50)
        :param str sort: The query parameter sort allows to define the sort order for the result of a query. A sort criteria consists of the name of a field and the sort direction (ASC for ascending and DESC descending). The sequence of the sort criteria (multiple can be used) defines the sort order of the entities in the result.
        :param str q: Query fields based on the Feed Item Query Language (FIQL). See Entity Definitions for available fields.
        :return: PagedListMgmtTargetFilterQuery
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['distribution_set_id', 'offset', 'limit', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_auto_assign_target_filter_queries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'distribution_set_id' is set
        if ('distribution_set_id' not in params or
                params['distribution_set_id'] is None):
            raise ValueError("Missing the required parameter `distribution_set_id` when calling `get_auto_assign_target_filter_queries`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'distribution_set_id' in params:
            path_params['distributionSetId'] = params['distribution_set_id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsets/{distributionSetId}/autoAssignTargetFilters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedListMgmtTargetFilterQuery',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_auto_assignments_count_for_distribution_set(self, distribution_set_id, **kwargs):  # noqa: E501
        """Return Auto Assignments count for Distribution Set  # noqa: E501

        Handles the GET request of retrieving Auto Assignments count for Distribution Set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_auto_assignments_count_for_distribution_set(distribution_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_id: (required)
        :return: MgmtDistributionSetStatistics
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_auto_assignments_count_for_distribution_set_with_http_info(distribution_set_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_auto_assignments_count_for_distribution_set_with_http_info(distribution_set_id, **kwargs)  # noqa: E501
            return data

    def get_auto_assignments_count_for_distribution_set_with_http_info(self, distribution_set_id, **kwargs):  # noqa: E501
        """Return Auto Assignments count for Distribution Set  # noqa: E501

        Handles the GET request of retrieving Auto Assignments count for Distribution Set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_auto_assignments_count_for_distribution_set_with_http_info(distribution_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_id: (required)
        :return: MgmtDistributionSetStatistics
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['distribution_set_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_auto_assignments_count_for_distribution_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'distribution_set_id' is set
        if ('distribution_set_id' not in params or
                params['distribution_set_id'] is None):
            raise ValueError("Missing the required parameter `distribution_set_id` when calling `get_auto_assignments_count_for_distribution_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'distribution_set_id' in params:
            path_params['distributionSetId'] = params['distribution_set_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsets/{distributionSetId}/statistics/autoassignments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MgmtDistributionSetStatistics',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_distribution_set(self, distribution_set_id, **kwargs):  # noqa: E501
        """Return single Distribution Set  # noqa: E501

        Handles the GET request of retrieving a single distribution set. Required permission: READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_distribution_set(distribution_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_id: (required)
        :return: MgmtDistributionSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_distribution_set_with_http_info(distribution_set_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_distribution_set_with_http_info(distribution_set_id, **kwargs)  # noqa: E501
            return data

    def get_distribution_set_with_http_info(self, distribution_set_id, **kwargs):  # noqa: E501
        """Return single Distribution Set  # noqa: E501

        Handles the GET request of retrieving a single distribution set. Required permission: READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_distribution_set_with_http_info(distribution_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_id: (required)
        :return: MgmtDistributionSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['distribution_set_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_distribution_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'distribution_set_id' is set
        if ('distribution_set_id' not in params or
                params['distribution_set_id'] is None):
            raise ValueError("Missing the required parameter `distribution_set_id` when calling `get_distribution_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'distribution_set_id' in params:
            path_params['distributionSetId'] = params['distribution_set_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsets/{distributionSetId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MgmtDistributionSet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_distribution_sets(self, **kwargs):  # noqa: E501
        """Return all Distribution Sets  # noqa: E501

        Handles the GET request of retrieving all distribution sets. Required permission: READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_distribution_sets(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str offset: The paging offset (default is 0)
        :param str limit: The maximum number of entries in a page (default is 50)
        :param str sort: The query parameter sort allows to define the sort order for the result of a query. A sort criteria consists of the name of a field and the sort direction (ASC for ascending and DESC descending). The sequence of the sort criteria (multiple can be used) defines the sort order of the entities in the result.
        :param str q: Query fields based on the Feed Item Query Language (FIQL). See Entity Definitions for available fields.
        :return: PagedListMgmtDistributionSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_distribution_sets_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_distribution_sets_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_distribution_sets_with_http_info(self, **kwargs):  # noqa: E501
        """Return all Distribution Sets  # noqa: E501

        Handles the GET request of retrieving all distribution sets. Required permission: READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_distribution_sets_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str offset: The paging offset (default is 0)
        :param str limit: The maximum number of entries in a page (default is 50)
        :param str sort: The query parameter sort allows to define the sort order for the result of a query. A sort criteria consists of the name of a field and the sort direction (ASC for ascending and DESC descending). The sequence of the sort criteria (multiple can be used) defines the sort order of the entities in the result.
        :param str q: Query fields based on the Feed Item Query Language (FIQL). See Entity Definitions for available fields.
        :return: PagedListMgmtDistributionSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_distribution_sets" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedListMgmtDistributionSet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_installed_targets(self, distribution_set_id, **kwargs):  # noqa: E501
        """Return installed targets to a specific distribution set  # noqa: E501

        Handles the GET request for retrieving installed targets of a single distribution set. Required permissions: READ_REPOSITORY and READ_TARGET  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_installed_targets(distribution_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_id: (required)
        :param str offset: The paging offset (default is 0)
        :param str limit: The maximum number of entries in a page (default is 50)
        :param str sort: The query parameter sort allows to define the sort order for the result of a query. A sort criteria consists of the name of a field and the sort direction (ASC for ascending and DESC descending). The sequence of the sort criteria (multiple can be used) defines the sort order of the entities in the result.
        :param str q: Query fields based on the Feed Item Query Language (FIQL). See Entity Definitions for available fields.
        :return: PagedListMgmtTarget
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_installed_targets_with_http_info(distribution_set_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_installed_targets_with_http_info(distribution_set_id, **kwargs)  # noqa: E501
            return data

    def get_installed_targets_with_http_info(self, distribution_set_id, **kwargs):  # noqa: E501
        """Return installed targets to a specific distribution set  # noqa: E501

        Handles the GET request for retrieving installed targets of a single distribution set. Required permissions: READ_REPOSITORY and READ_TARGET  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_installed_targets_with_http_info(distribution_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_id: (required)
        :param str offset: The paging offset (default is 0)
        :param str limit: The maximum number of entries in a page (default is 50)
        :param str sort: The query parameter sort allows to define the sort order for the result of a query. A sort criteria consists of the name of a field and the sort direction (ASC for ascending and DESC descending). The sequence of the sort criteria (multiple can be used) defines the sort order of the entities in the result.
        :param str q: Query fields based on the Feed Item Query Language (FIQL). See Entity Definitions for available fields.
        :return: PagedListMgmtTarget
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['distribution_set_id', 'offset', 'limit', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_installed_targets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'distribution_set_id' is set
        if ('distribution_set_id' not in params or
                params['distribution_set_id'] is None):
            raise ValueError("Missing the required parameter `distribution_set_id` when calling `get_installed_targets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'distribution_set_id' in params:
            path_params['distributionSetId'] = params['distribution_set_id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsets/{distributionSetId}/installedTargets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedListMgmtTarget',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_metadata2(self, distribution_set_id, **kwargs):  # noqa: E501
        """Return meta data for Distribution Set  # noqa: E501

        Get a paged list of meta data for a distribution set. Required permission: READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metadata2(distribution_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_id: (required)
        :param str offset: The paging offset (default is 0)
        :param str limit: The maximum number of entries in a page (default is 50)
        :param str sort: The query parameter sort allows to define the sort order for the result of a query. A sort criteria consists of the name of a field and the sort direction (ASC for ascending and DESC descending). The sequence of the sort criteria (multiple can be used) defines the sort order of the entities in the result.
        :param str q: Query fields based on the Feed Item Query Language (FIQL). See Entity Definitions for available fields.
        :return: PagedListMgmtMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_metadata2_with_http_info(distribution_set_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_metadata2_with_http_info(distribution_set_id, **kwargs)  # noqa: E501
            return data

    def get_metadata2_with_http_info(self, distribution_set_id, **kwargs):  # noqa: E501
        """Return meta data for Distribution Set  # noqa: E501

        Get a paged list of meta data for a distribution set. Required permission: READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metadata2_with_http_info(distribution_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_id: (required)
        :param str offset: The paging offset (default is 0)
        :param str limit: The maximum number of entries in a page (default is 50)
        :param str sort: The query parameter sort allows to define the sort order for the result of a query. A sort criteria consists of the name of a field and the sort direction (ASC for ascending and DESC descending). The sequence of the sort criteria (multiple can be used) defines the sort order of the entities in the result.
        :param str q: Query fields based on the Feed Item Query Language (FIQL). See Entity Definitions for available fields.
        :return: PagedListMgmtMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['distribution_set_id', 'offset', 'limit', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metadata2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'distribution_set_id' is set
        if ('distribution_set_id' not in params or
                params['distribution_set_id'] is None):
            raise ValueError("Missing the required parameter `distribution_set_id` when calling `get_metadata2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'distribution_set_id' in params:
            path_params['distributionSetId'] = params['distribution_set_id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsets/{distributionSetId}/metadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedListMgmtMetadata',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_metadata_value2(self, distribution_set_id, metadata_key, **kwargs):  # noqa: E501
        """Return single meta data value for a specific key of a Distribution Set  # noqa: E501

        Get a single meta data value for a meta data key. Required permission: READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metadata_value2(distribution_set_id, metadata_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_id: (required)
        :param str metadata_key: (required)
        :return: MgmtMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_metadata_value2_with_http_info(distribution_set_id, metadata_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_metadata_value2_with_http_info(distribution_set_id, metadata_key, **kwargs)  # noqa: E501
            return data

    def get_metadata_value2_with_http_info(self, distribution_set_id, metadata_key, **kwargs):  # noqa: E501
        """Return single meta data value for a specific key of a Distribution Set  # noqa: E501

        Get a single meta data value for a meta data key. Required permission: READ_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metadata_value2_with_http_info(distribution_set_id, metadata_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_id: (required)
        :param str metadata_key: (required)
        :return: MgmtMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['distribution_set_id', 'metadata_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metadata_value2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'distribution_set_id' is set
        if ('distribution_set_id' not in params or
                params['distribution_set_id'] is None):
            raise ValueError("Missing the required parameter `distribution_set_id` when calling `get_metadata_value2`")  # noqa: E501
        # verify the required parameter 'metadata_key' is set
        if ('metadata_key' not in params or
                params['metadata_key'] is None):
            raise ValueError("Missing the required parameter `metadata_key` when calling `get_metadata_value2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'distribution_set_id' in params:
            path_params['distributionSetId'] = params['distribution_set_id']  # noqa: E501
        if 'metadata_key' in params:
            path_params['metadataKey'] = params['metadata_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsets/{distributionSetId}/metadata/{metadataKey}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MgmtMetadata',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_rollouts_count_by_status_for_distribution_set(self, distribution_set_id, **kwargs):  # noqa: E501
        """Return Rollouts count by status for Distribution Set  # noqa: E501

        Handles the GET request of retrieving Rollouts count by Status for Distribution Set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rollouts_count_by_status_for_distribution_set(distribution_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_id: (required)
        :return: MgmtDistributionSetStatistics
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_rollouts_count_by_status_for_distribution_set_with_http_info(distribution_set_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_rollouts_count_by_status_for_distribution_set_with_http_info(distribution_set_id, **kwargs)  # noqa: E501
            return data

    def get_rollouts_count_by_status_for_distribution_set_with_http_info(self, distribution_set_id, **kwargs):  # noqa: E501
        """Return Rollouts count by status for Distribution Set  # noqa: E501

        Handles the GET request of retrieving Rollouts count by Status for Distribution Set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rollouts_count_by_status_for_distribution_set_with_http_info(distribution_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_id: (required)
        :return: MgmtDistributionSetStatistics
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['distribution_set_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_rollouts_count_by_status_for_distribution_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'distribution_set_id' is set
        if ('distribution_set_id' not in params or
                params['distribution_set_id'] is None):
            raise ValueError("Missing the required parameter `distribution_set_id` when calling `get_rollouts_count_by_status_for_distribution_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'distribution_set_id' in params:
            path_params['distributionSetId'] = params['distribution_set_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsets/{distributionSetId}/statistics/rollouts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MgmtDistributionSetStatistics',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_statistics_for_distribution_set(self, distribution_set_id, **kwargs):  # noqa: E501
        """Return Rollouts, Actions and Auto Assignments counts by Status for Distribution Set  # noqa: E501

        Handles the GET request of retrieving Rollouts, Actions and Auto Assignments counts by Status for Distribution Set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_statistics_for_distribution_set(distribution_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_id: (required)
        :return: MgmtDistributionSetStatistics
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_statistics_for_distribution_set_with_http_info(distribution_set_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_statistics_for_distribution_set_with_http_info(distribution_set_id, **kwargs)  # noqa: E501
            return data

    def get_statistics_for_distribution_set_with_http_info(self, distribution_set_id, **kwargs):  # noqa: E501
        """Return Rollouts, Actions and Auto Assignments counts by Status for Distribution Set  # noqa: E501

        Handles the GET request of retrieving Rollouts, Actions and Auto Assignments counts by Status for Distribution Set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_statistics_for_distribution_set_with_http_info(distribution_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int distribution_set_id: (required)
        :return: MgmtDistributionSetStatistics
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['distribution_set_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_statistics_for_distribution_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'distribution_set_id' is set
        if ('distribution_set_id' not in params or
                params['distribution_set_id'] is None):
            raise ValueError("Missing the required parameter `distribution_set_id` when calling `get_statistics_for_distribution_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'distribution_set_id' in params:
            path_params['distributionSetId'] = params['distribution_set_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsets/{distributionSetId}/statistics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MgmtDistributionSetStatistics',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invalidate_distribution_set(self, body, distribution_set_id, **kwargs):  # noqa: E501
        """Invalidate a distribution set  # noqa: E501

        Invalidate a distribution set. Once a distribution set is invalidated, it can not be valid again. An invalidated distribution set cannot be assigned to targets anymore. The distribution set that is going to be invalidated will be removed from all auto assignments. Furthermore, the user can choose to cancel all rollouts and (force) cancel all actions connected to this distribution set. Required permission: UPDATE_REPOSITORY, UPDATE_TARGET   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invalidate_distribution_set(body, distribution_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MgmtInvalidateDistributionSetRequestBody body: (required)
        :param int distribution_set_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invalidate_distribution_set_with_http_info(body, distribution_set_id, **kwargs)  # noqa: E501
        else:
            (data) = self.invalidate_distribution_set_with_http_info(body, distribution_set_id, **kwargs)  # noqa: E501
            return data

    def invalidate_distribution_set_with_http_info(self, body, distribution_set_id, **kwargs):  # noqa: E501
        """Invalidate a distribution set  # noqa: E501

        Invalidate a distribution set. Once a distribution set is invalidated, it can not be valid again. An invalidated distribution set cannot be assigned to targets anymore. The distribution set that is going to be invalidated will be removed from all auto assignments. Furthermore, the user can choose to cancel all rollouts and (force) cancel all actions connected to this distribution set. Required permission: UPDATE_REPOSITORY, UPDATE_TARGET   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invalidate_distribution_set_with_http_info(body, distribution_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MgmtInvalidateDistributionSetRequestBody body: (required)
        :param int distribution_set_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'distribution_set_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invalidate_distribution_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `invalidate_distribution_set`")  # noqa: E501
        # verify the required parameter 'distribution_set_id' is set
        if ('distribution_set_id' not in params or
                params['distribution_set_id'] is None):
            raise ValueError("Missing the required parameter `distribution_set_id` when calling `invalidate_distribution_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'distribution_set_id' in params:
            path_params['distributionSetId'] = params['distribution_set_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsets/{distributionSetId}/invalidate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_distribution_set(self, body, distribution_set_id, **kwargs):  # noqa: E501
        """Update Distribution Set  # noqa: E501

        Handles the UPDATE request for a single Distribution Set. Required permission: UPDATE_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_distribution_set(body, distribution_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MgmtDistributionSetRequestBodyPut body: (required)
        :param int distribution_set_id: (required)
        :return: MgmtDistributionSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_distribution_set_with_http_info(body, distribution_set_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_distribution_set_with_http_info(body, distribution_set_id, **kwargs)  # noqa: E501
            return data

    def update_distribution_set_with_http_info(self, body, distribution_set_id, **kwargs):  # noqa: E501
        """Update Distribution Set  # noqa: E501

        Handles the UPDATE request for a single Distribution Set. Required permission: UPDATE_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_distribution_set_with_http_info(body, distribution_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MgmtDistributionSetRequestBodyPut body: (required)
        :param int distribution_set_id: (required)
        :return: MgmtDistributionSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'distribution_set_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_distribution_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_distribution_set`")  # noqa: E501
        # verify the required parameter 'distribution_set_id' is set
        if ('distribution_set_id' not in params or
                params['distribution_set_id'] is None):
            raise ValueError("Missing the required parameter `distribution_set_id` when calling `update_distribution_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'distribution_set_id' in params:
            path_params['distributionSetId'] = params['distribution_set_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsets/{distributionSetId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MgmtDistributionSet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_metadata2(self, body, distribution_set_id, metadata_key, **kwargs):  # noqa: E501
        """Update single meta data value of a distribution set  # noqa: E501

        Update a single meta data value for speficic key. Required permission: UPDATE_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_metadata2(body, distribution_set_id, metadata_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MgmtMetadataBodyPut body: (required)
        :param int distribution_set_id: (required)
        :param str metadata_key: (required)
        :return: MgmtMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_metadata2_with_http_info(body, distribution_set_id, metadata_key, **kwargs)  # noqa: E501
        else:
            (data) = self.update_metadata2_with_http_info(body, distribution_set_id, metadata_key, **kwargs)  # noqa: E501
            return data

    def update_metadata2_with_http_info(self, body, distribution_set_id, metadata_key, **kwargs):  # noqa: E501
        """Update single meta data value of a distribution set  # noqa: E501

        Update a single meta data value for speficic key. Required permission: UPDATE_REPOSITORY  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_metadata2_with_http_info(body, distribution_set_id, metadata_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MgmtMetadataBodyPut body: (required)
        :param int distribution_set_id: (required)
        :param str metadata_key: (required)
        :return: MgmtMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'distribution_set_id', 'metadata_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_metadata2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_metadata2`")  # noqa: E501
        # verify the required parameter 'distribution_set_id' is set
        if ('distribution_set_id' not in params or
                params['distribution_set_id'] is None):
            raise ValueError("Missing the required parameter `distribution_set_id` when calling `update_metadata2`")  # noqa: E501
        # verify the required parameter 'metadata_key' is set
        if ('metadata_key' not in params or
                params['metadata_key'] is None):
            raise ValueError("Missing the required parameter `metadata_key` when calling `update_metadata2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'distribution_set_id' in params:
            path_params['distributionSetId'] = params['distribution_set_id']  # noqa: E501
        if 'metadata_key' in params:
            path_params['metadataKey'] = params['metadata_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/hal+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/v1/distributionsets/{distributionSetId}/metadata/{metadataKey}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MgmtMetadata',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
